#!/bin/bash
# #!명령은 이화일을 실행시킬 shell이 존재하는 path을 지정

######################################################################
# [warning] should be modified here
######################################################################
proFILEdir=$(readlink -f $(dirname $BASH_SOURCE))
if [ "${proFILEdir##*/}" != ".proFILEs" ] || [ -z "${proFILEdir}" ]; then
  echo "${YELLOW} Your project is located here: [$proFILEdir]"
  echo "Yor project must be located ~/.proFILEs ${NCOL}"
  read -p 'usage: git clone git@github.com:av930/proFILEs.git ~/.proFILEs'
  exit
fi

SRC=${proFILEdir}
DST=$HOME
BACKUP=$HOME/.rc_backup


######################################################################
# pop up message
######################################################################
function winpop() {
    echo $USERNAME SUCCESS! copy from $1  to $2;
    #$1은 첫번째 인자, $2하면 두번째인자...로 무한대 지원가능
    #echo 대신 net send 이용가능
    return 0
}

######################################################################
# copy if not exist
######################################################################
function link_notexist() {
    if [ ! -e "$HOME/$1" ]; then
	#in case of non-existance, just create
        ln -fs  ${proFILEdir}/$1 $HOME/$1
    elif [ "$HOME/$1" = "$HOME/.bash_aliases" ]; then
	#in case of .bashrc file, link .bash_aliases
        ln -fs  ${proFILEdir}/.bashrc $HOME/$1
    else
	    echo "error happened, please check!!"
    fi
    return 0
}

######################################################################
# make copy
######################################################################
function copy_tools() {
    proFILEdir=$SRC
    proFILEdirOS='unknown'

    if [ $(expr match "$OSTYPE" 'cygwin') -ne 0 ]
    then proFILEdirOS=${proFILEdir}/cygwin
    else proFILEdirOS=${proFILEdir}/linux
    fi

    printf "======================================================================\n"
    printf " COPY from ${proFILEdir} to $HOME dir\n"
    set -x
    pushd ${proFILEdir}

    if [ ! -f "$HOME/.profile.config" ]; then
        cp -ivf default.config $HOME/.profile.config;fi

    for var
        in .inputrc .screenrc .gitignore .gitconfig .bash_aliases
    do
        mkdir -p ${BACKUP}
        mv $var  ${BACKUP}/$var
        link_notexist $var
    done

    popd
    set +x

    winpop $2 $3
    return 0
}

######################################################################
# make remove
######################################################################
function restore_tools() {

    for var
        in .inputrc .screenrc .gitignore .gitconfig .bash_aliases
    do
        rm -f "$HOME/$var"
        mv "${BACKUP}/$var" "$HOME/$var";
    done

    return 0
}

##--------------------------- Menu Functions --------------------------------
##============================================================================
function handler_args(){
## ---------------------------------------------------------------------------
# Hander Arguments

    local ret
    local options
    while getopts es: options 2> /dev/null
    do
       case $options in
          c) copy_tools; ret=processed;;
          r) restore_tools; ret=processed;;
          \?) printf "${RED}Only -a,-e,-s are valid [$options] ${NCOL}\n"
            handler_menu
            ret=processed;;
       esac
    done

    if ! [ "$ret" = "processed" ]; then
        handler_menu
    fi

    unset OPTIND
    unset OPTSTRING
}

######################################################################
# main function
######################################################################
function handler_menu(){
    printf "CONFIRM : WILL UPDATE & COPY from $SRC $DST"
    printf "\n[c)opy r)restore n)oting]: "
    read confirm
    if [ "$confirm" = "c" ]; then
        copy_tools
    elif [ "$confirm" = "r" ]; then
        restore_tools
    else
        print "nothing happend, canceled all job"
    fi
}

######################################################################
# post check
######################################################################
handler_args $@

if [ ! -f $(which sceen) ]; then
  printf "you need to run:${RED} sudo apt-get install screen ${NCOL}"
  printf "${YELLOW} this configuration needs screen except CYGWIN ${NCOL}"
fi

exit 0
