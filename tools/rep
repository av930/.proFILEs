#!/bin/bash
# ==========================================================================
#  readme    : repo utiliies
#  mail      : joongkeun.kim@lge.com, av9300@gmail.com
# ==========================================================================
##---------------------------------------------------------- DEBUG OPTION
#DEBUG=["echo -e"|:], : means no-operation
DEBUG=:
DIR_SCRIPT=$(dirname "$0")
DIR_CURR=$(pwd)
LC_ALL=C.UTF-8

if [ -e "${DIR_SCRIPT}/prelibrary" ]; then source ${DIR_SCRIPT}/prelibrary;
else source ${proFILEdir}/tools/prelibrary; fi
#user setting
account=vc.integrator
path_mirror="/data001/${account}"/mirror
rm -f ${file_error}


##--------------------------- Menu Functions --------------------------------
##============================================================================

function getGitRootPath(){
## ---------------------------------------------------------------------------
# get repo dir path from repo sub directory
    echo $(git rev-parse --show-toplevel);
}



function runSSHcheckError(){
## ---------------------------------------------------------------------------
# run command, get return code and print guide
    echo "\$ $@" ;"$@"
    case $? in
     0) ;;
     1) echo Generic error, usually because invalid command line options or malformed configuration;;
     2) echo Connection failed;;
    65) echo Host not allowed to connect;;
    66) echo General error in ssh protocol;;
    67) echo Key exchange failed;;
    68) echo Reserved;;
    69) echo MAC error;;
    70) echo Compression error;;
    71) echo Service not available;;
    72) echo Protocol version not supported;;
    73) echo Host key not verifiable;;
    74) echo Connection failed;;
    75) echo Disconnected by application;;
    76) echo Too many connections;;
    77) echo Authentication cancelled by user;;
    78) echo No more authentication methods available;;
    79) echo Invalid user name;;
     *) echo Unknown Error;;
    esac
}



function runRepoInitcheckError(){
## ---------------------------------------------------------------------------
# run command, get return code and print guide
    local ret=1 #return 1 is success, 0 is fail
    echo "\$ $@"
    time "$@" 2> >(tee -a ${file_error})
    #"$@" | tee -a ${file_error}

    grep -nEe "(fatal|fail|error)" ${file_error} >/dev/null
    if [ $? -eq 0 ]; then
        bar outline "check error"
        err "${file_error}"
        ret=0
    fi

    grep 'Permission denied (publickey)' ${file_error} >/dev/null
    if [ $? -eq 0 ]; then
        err "http://collab.lge.com/main/display/SWIFR/repo#publickey"
        ret=0
    fi

    #if [ $? -ne 0 ];then runSSHcheckError ssh -p vc.integrator@vgit.lge.com:29430;fi

    return $ret
}



function runRepoSynccheckError(){
## ---------------------------------------------------------------------------
# run command, get return code and print guide
# ex) runRepoSynccheckError 
    if [ -z "$1" ]; then 
        read -p "Please input job number to repo sync [enter:auto| number:ex)16| ctrl+c:exit]: " njobs; 
        if [ -z $njobs ]; then  njobs=$(( $(nproc --all) / 4)); fi
    else
        njobs=$1
    fi

    showRUN repo sync --no-tags --no-clone-bundle --fail-fast -qcj${njobs:-16} $2

    #"$@" 2> >(tee -a ${file_error})
    "$@" > >(tee -a ${file_error})
    case $? in
     0) ;;
     1) echo Generic error, usually because invalid command line options or malformed configuration;;
     2) echo Connection failed;;
     *) echo Unknown Error;;
    esac
}



function findFileLocation(){
## ---------------------------------------------------------------------------
## find input-path up and down,
## $1:path name, $2:max depth to sub dir
## ex) findFileLocation .repo 5
## ex) findFileLocation .git 2

    local target=${1:-.repo}
    local down_depth=${2:-2} #default value:2
    local ret=()

    # find in sub directory with depth
    readarray -t ret < <(find . -maxdepth ${down_depth} -path "*${target}")
    case ${#ret[@]} in
    1)  # already found sub dir
        REPO_PATH=$(readlink -f ${ret[0]})
        ;;
    0)  # find in parent directory upto $HOME
        while [[ "${PWD}" =~ "${HOME}" ]]; do
            if [ -d ${target} ]; then break; fi
            cd ..
        done
        if [ -d ${target} ]; then REPO_PATH=$(readlink -f ${target});else REPO_PATH="NULL";fi
        ;;
    *)  # found multiple dir in sub dir
        printf "subdir [%s]\n" ${#ret[@]}
        printf "%s\n" ${ret[@]};
        REPO_PATH="NULL"
        ;;
    esac
}



function getRepoCMD(){
## ---------------------------------------------------------------------------
# get repo command from exising repo project
# $1 show repo command (default: save info to each variable such as REPO_REMOTE, REPO_BRANCH, ...)
    local count file_tempa file_tempb

    if [ -z "${REPO_BRANCH}" ]; then
        printf "${RED}[warning] please check if you have switched to a topic branch from after repo init${NCOL}\n"
        printf "${RED}[warning] temporarily set to local branch name${NCOL}\n"
        printf "\tyou can set-up upstream branch with: git branch -u %s <branch-name>\n" "$(echo $(git remote -v |cut -f1))"
        REPO_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    fi

    # find using manifest.xml
    file_tempa=$(ls -Art ../*.xml | tail -n 1)
    count=$(grep -c include ${file_tempa})
    if [ -L "${file_tempa}" ];then
        file_tempb=$(readlink "${file_tempa}")
        FILE_MANI=${file_tempb#*/}
    elif [ $count -eq 1 ]; then
        file_tempb=$(grep include $file_tempa |sed -E 's/<.*name="(.*)".\/>/\1/')
        FILE_MANI=${file_tempb// /}
    else
        FILE_MANI=default.xml
    fi

    if [ -n "$REPO_MIRROR" ];then EXTRA_OPTION="--reference $REPO_MIRROR"; fi
    if [ "$1" = "show" ];then
        bar inline "repo-init cmd"
        log "repo init -u $REPO_REMOTE -b $REPO_BRANCH -m $FILE_MANI --repo-url $REPO_URL $EXTRA_OPTION"
    fi
    return 0
}



function findProperREPLServer(){
## ---------------------------------------------------------------------------
# find replication server
# $1 log-file to show result
set -x
    local server_PORT=29418
    local server_URL=( lampmg1.lge.com lampgd1.lge.com 10.158.11.174 )
    local system_load=( "${server_URL[@]/*/0}" )
    local file_temp=$(mktemp)
    local min_load=10000
    local i=0
    local get_delay get_connection get_task get_mem
    local printformat="%-20s|%10s|%14s|%10s|%12s|%10s"

    printf "replication server from lamp.lge.com: \n" >> $1
    printf "${printformat}\n" "server list" "delay(ms)" "connections(#)" "tasks(#)" "free memory" "total load" >> $1
    printf "${yellow}--------------------------------------------------------------------------------------\n${NCOL}" >> $1
    for server in "${server_URL[@]}"; do
        get_delay=$(ping ${server} -s 1016 -c 4 -A |sed -ne 's/.*ewma.*\/\(.*\) ms$/\1/p' | sed 's/\.//')
        if [ $? -ne 0 ]; then continue; fi

        ssh -p ${server_PORT} -o ConnectTimeout=2 -o ConnectionAttempts=1 \
            ${server} gerrit show-caches | grep -E "(^SSH:|^Tasks:|^Mem:)" > ${file_temp}
        if [ $? -ne 0 ]; then continue;fi

        get_connection=$(sed -n 's/^SSH: *\(.*\) users.*/\1/p' ${file_temp})
        get_task=$(sed -n 's/^Tasks: *\(.*\) total.*/\1/p' ${file_temp})
        get_mem=$(sed -n 's/^Mem:.*+ \(.*\) free.*/\1/p' ${file_temp})

        #weight delay/10 connectoin*80 task*100
        system_load[i]=$(echo "$get_delay/10 + $get_connection*80 + $get_task*100 + ${system_load[i]}" |bc )

        printf "${printformat}\n" $server $get_delay $get_connection $get_task $get_mem ${system_load[i]} >> $1
        if (( "${min_load}" >= "${system_load[i]}" )); then min_load=$system_load; REPL_SERVER="$server:$server_PORT"; fi
        (( i++ ))
    done

    #rm -f ${file_temp}
set +x
}



function repoInit(){
## ---------------------------------------------------------------------------
# repo init helper
# $1 short repo init command
    #option handle
    local url revision manifest platform reference depth repo_url extra ret=0
    if ! options=$(getopt -l reference:,depth:,repo-url:,no-clone-bundle,partial-clone,no-tags,mirror -o b:m:p:u: -- "$@")
    then err 'please check "repo init --help"'; exit 1; fi

    #reset legacy positional parameter except $options
    eval set -- "$options"
    while true; do
        case $1 in
            #when option has sub option, should shift 2 or just shift
            -u|--manifest-url)                                          url=$2;         shift 2;;
            -b|--manifest-branch)                                       revision=$2;    shift 2;;
            -m|--manifest-name)                                         manifest=$2;    shift 2;;
            -p|--platform)                                              platform=$2;    shift 2;;
            --reference)                                                reference=$2;   shift 2;;
            --depth)                                                    depth=$2;       shift 2;;
            --repo-url)                                                 repo_url=$2;    shift 2;;
            #single option that need no additional sub value
            #skip single option and remove getopt cmd
            -c|--current-branch)                                  extra="${extra} $1";  shift 1;;
            --no-clone-bundle|--partial-clone|--no-tags|--mirror) extra="${extra} $1";  shift 1;;
            --|*)                                                                  shift; break;;
        esac
    done

    #revision handle, if url has lamp
    if [ -z "${revision}" ] && [ "${url}" != "${url/lamp/}" ]; then
        printf "usage: rep init -b [branch] [-m manifest.xml] \n";
        bar outline
        printf "ex: rep init -b lampauto_s_release -m all.xml \n";
        printf "ex: rep init -u https://android.googlesource.com/platform/manifest -b android-12.1.0_r1 \n";
        printf "ex: rep init -u ssh://lampgd1.lge.com:29418/platform/manifest.git -b lampauto_r_release \n -m lampauto/lampauto-gm-recent.xml --reference=/data001/vc.integrator/mirror/lampauto_r_release/ \n --repo-url=ssh://lamp.lge.com:29418/repo/git-repo.git \n";
        exit
    fi

    #url handle with replication server
    local file_info=$(mktemp)
    if [ -z "${url}" ] || [ "${url}" != "${url/lamp/}" ]; then
        bar outline 'repo server info' > ${file_info}
        findProperREPLServer ${file_info}
        url="ssh://${REPL_SERVER}/platform/manifest.git";
    fi
    if [ -z "${reference}" ];then reference="${reference:-${path_mirror}/${revision}}"; fi
    if [ -z "${repo_url}" ] || [ "${url}" != "${url/lamp/}" ];then repo_url='ssh://lamp.lge.com:29418/repo/git-repo.git';fi;

    cmd_repoinit="repo init ${url:+-u ${url}} ${revision:+-b ${revision}} ${manifest:+-m ${manifest}} ${platform:+-p ${platform}} ${reference:+--reference=${reference}} ${depth:+--depth=${depth}} ${repo_url:+--repo-url=${repo_url}} ${extra} $@"

    #make final repo init cmd
    bar outline "executed command:" >> ${file_info}
    printf "${cmd_repoinit}\n" >> ${file_info}

    #execute cmd
    if runRepoInitcheckError ${cmd_repoinit}; then ret=1; fi

    #show repo info
    bar outline >> ${file_info}
    cat ${file_info}; rm -f ${file_info}

    return $ret
}



function showManifestTree(){
## ---------------------------------------------------------------------------
# read file and print line "include" keyword
# $1 manifest file name
# $2 treedepth to display sub manifest
    local file
    local path='|--|--|--|--|--|--'
    local treedepth=${2:-0}

    #name of manifest
    printf "%s$1 \n" "${path::${treedepth}}"

    (( treedepth=treedepth+3 ))
    #name of branches
    cat $1| sed -n 's/.*revision="\([^ |\t]*\)".*/\1/p' |sort|uniq| xargs -n1 -I {} printf "%60s {}\n"
    
    #sub manifests
    cat $1 | sed -n 's/.*include name="\(.*\)".*/\1/p' | \
    while read -r file; do
    if [ -n "${file}" ];then showManifestTree ${file} ${treedepth}; fi
    done
    (( treedepth=treedepth-3 ))
}



function findGitRepository(){
## ---------------------------------------------------------------------------
# find git repository with path and project name with regexp
# $1 path or project
# usage: findGitRepository [path|project]

    bar inline "repo source path]                                                              [repo branch(revision)]        [repo name in manifest"
    repo forall -j16 -c 'printf "%-80.80s %-30.30s %-80s\n" "${REPO_PROJECT}" "${REPO_RREV}" "${REPO_PATH}"'
    #repo list -r ${findstr}
    
}



function getRepoShow(){
## ---------------------------------------------------------------------------
# print information of repo
# $1 manifests file (default is current manifests)

    oldIFS=${IFS}; IFS='';

    #show repo dir path
    bar inline "repo path"
    log "${REPO_PATH}"

    #get global variable and repo init command.
    getRepoCMD show

    #show manifest file with included sub manifests.
    local manifest=${1:-${FILE_MANI}}
    bar inline "manifests"
    clog  "    <name of manifest>                                      <including branches>"
    showManifestTree ${manifest} 0

    #show count of repository
    ## block infomation
    bar inline "misc information for this repositories"
    clog "number of repositories: " $REPO_COUNT

    #show last synced date
    if [ -f .git/FETCH_HEAD ]; then clog "last manifest-synced date: " $(stat -c %y .git/FETCH_HEAD);
    else clog "last manifest-synced date: " $(ls -lct);fi

    #topic/working branch
    read -p "[WARNING: It takes time] repo branch all repository [enter:continue| ctrl+c]: "
    clog "current topic branch: " $(repo branch)

    IFS=${oldIFS}
}



function getRepoInfo(){
## ---------------------------------------------------------------------------
# print information(changes, recent commits) of current repository
#
    bar inline "repo status: show only uncommitted changes"
    repo status -j1 -o

    bar inline "git log -1 for all repositories"
    echo "revision git-name                    src-path"
    repo forall -j1 -c 'printf "%90s %-80s\n" "${REPO_PROJECT} ${REPO_LREV:0:6}" "${REPO_PATH}"'

    bar inline "md5 sum for all repositories"
    repo forall -j8 -c git log -1 --pretty=format:%H | md5sum

    #run command "repo info"
    bar inline "repo info: show full commit diff to remote branch"
    echo "to stop [ctrl+c] "    
    repo info
}



function getRecentCommit(){
## ---------------------------------------------------------------------------
# print information of repo
# $1 manifests file (default is current manifests)
    local count=$1
    local out

    echo "[$1][$count][$out]"
    if [ -z $1 ]; then read -p "how many commit want to read? [#:number| enter:20| save:savefile| ctrl+c/q:exit]: " count; fi

    case $count in
        *[0-9]*) out='/dev/stdout';;
        '') out='/dev/stdout'
            count=20
            log "\nonly shows recent maxium 20 first-commits(git log -1) from all repository"
            ;;
        *)  out=${REPO_ROOT}/repo.commit
            count=${REPO_COUNT}
            log "\check file [$out], all -1 commits are saved"
            ;;
    esac
    
    echo "repo forall -c \"git log -1 --abbrev=6 --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%ad  %h  [%an] %d %s%n'\" |sort -r |head -${count:-50}"
    echo "> $out"
    
    bar outline "repo get recent commit"
    bar inline "[date:YMD HMS]      [sha]   [author]      [commit title]                                            [git project                            branch]"
    repo forall -j16 -c 'printf "%-100.100s %-80s \n" "$(git log -1 --abbrev=6 --date=format:"%Y-%m-%d %H:%M:%S" --pretty=format:"%ad  %h  [%an] %s")" "[${REPO_PROJECT}  ${REPO_RREV}]"' |sort -r |head -${count:-50} > $out
    #repo forall -c "git log -1 --abbrev=6 --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%ad  %h  [%an] %d %s%n'" |sort -r |head -${count:-50} > $out

}


function debugRepo(){
## ---------------------------------------------------------------------------
# print information of repo
# $1 manifests file (default is current manifests)

    echo "this version is expected to used, please check this version is matched to your local version"
    bar outline "warning: this is the repo packaged with this project."
    $REPO_PATH/../repo/repo version

    printf "\n\n"
    bar outline "the local version currently you are using"
    bar inline "version & python path"
    py_path=$(which python) >/dev/null
    py_ver="$(python --version 2>&1)"
    printf "%s is installed in [%s]\n" "${py_ver}" "${py_path}"


    bar inline "path for repo & git"
    which repo
    which git

    bar inline "version info for repo and sub utilities"
    repo --version

}



function checkConnection(){
## ---------------------------------------------------------------------------
# check connection and report error
# $1 url (only ssh url)
# $2 account
# $3 password

    local url=${1:-${REPO_URL}}
    server=${url}
    bar inline "repo check connection"
    if [ -x "$(command -v ssh)" ]; then  log "ssh is installed"; else err "ssh is not installed"; fi
    #if [ "${1:-${REPO_URL}}"
    status=$(ssh $1 )

    if [[ $status == ok ]] ; then
      echo auth ok, do something
    elif [[ $status == "Permission denied"* ]] ; then
      echo no_auth
    else
      echo other_error
    fi


    exit
}



function handleMenu(){
## ---------------------------------------------------------------------------
# show ui menu for this script
printf ${green}
cat << PREFACE
==============================================================
 the menu for repo tools
 -------------------------------------------------------------
 supported command: ex) rep show
    show, init, sync, commit, debug, check, find
==============================================================
PREFACE
printf ${NCOL}

    local COLUMNS=60
    PS3=$'\e[00;35m=== Please input command! [enter:menu, number:choice, ctrl+c:exit] === : \e[0m'
    select CHOICE in                                                                          \
    "show: shows repository info such as manifest path, repo cmd, tree of manifests, etc 
     ex) rep show, rep show default.xml, rep show event/manifest.xml                    "     \
    "init: repo init with automatic options"                                                  \
    "sync: repo sync with optimized multi-job and options                                    
     ex) rep sync, rep sync 8, rep sync 16 --force-sync(options)"                             \
    "commit: shows lastest commits(git log -1) from all repository (default 20)
     ex) rep commit, rep commit 4, rep commit log.txt"                                        \
    "info: shows uncommited changes, top -1 commits, md5 sum, repo info for all repositories
     ex) rep info, rep info|more, rep info| grep build"                                       \
    "debug: shows repo/git/python version info used in current repo"                          \
    "check: find problems when 'repo init' or 'repo sync' failed"                             \
    "find: (list) search string in all [repo path] : [repo revision] : [repo name]
     ex) rep find, rep list|more, rep find| grep build, rep list|grep -v build"
    do
        handleCommand "${CHOICE%%:*}"
    done
}



function handleCommand(){
## ---------------------------------------------------------------------------
# main handler for this scriptre
# $1 command

local ret=0
    case "$1" in
        #$1:below ${@:2}:parameters
        show) getRepoShow  "${@:2}"                                ;;
        info) getRepoInfo "${@:2}"  2>&1 | tee ${REPO_ROOT}/repo.info
              info "please check file [${REPO_ROOT}/repo.info]"
              warn "you can use this file to compare other repo."   ;;
        init) repoInit "${@:2}"
            if [ $? -eq 0 ]; then
                info "To RUN next command:"
                runRepoSynccheckError
            fi                                                      ;;
        sync) runRepoSynccheckError "${@:2}"                        ;;
        commit) getRecentCommit "${@:2}"                            ;;
        debug) debugRepo "${@:2}"                                   ;;
        check) checkConnection "${@:2}"                             ;;
        find|list) findGitRepository "${@:2}"                       ;;
        "") handleMenu "${@}"                                       ;;
        *) repo "${@}"
          return $ret                                               ;;
    esac
}


function checkPreCondition(){
## ---------------------------------------------------------------------------
# pre-check
# $1 command
    #find & move manifest dir
    REPO_PATH=''; REPO_ROOT='';
    findFileLocation .repo/manifests 5
    if [ -d "${REPO_PATH}" ];then cd ${REPO_PATH}; REPO_ROOT=${REPO_PATH%/.repo*}
    else err "you are not in repo project, please check !";exit;
    fi

    #set global variable
    REPO_REMOTE=$(git remote -v |grep fetch |awk '{print $2}')
    REPO_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}| sed 's:.*/::')
    REPO_URL=$(cat ../repo/.git/config |grep url|sed 's/.*=\(.*\)/\1/')
    REPO_MIRROR=$(cat ../manifests.git/config |grep reference|sed 's/.*=\(.*\)/\1/')
    REPO_COUNT=$($REPO_PATH/../repo/repo list |wc -l)
}
##============================================================================
## Main
##============================================================================
#set -x


case "$1" in
    show|info|sync|commit|debug|find|'')     checkPreCondition    ;;
    init)                                                         ;;
    *) repo "${@}"                           return $ret          ;;
esac

handleCommand $@
