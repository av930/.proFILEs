#!/bin/bash
# ==========================================================================
#  readme    : docker handler
#  mail      : joongkeun.kim@lge.com/av9300@gmail.com
# ==========================================================================


printf ${CYAN}
cat << PREFACE > /dev/null
============================================================================
---------------------------           +             ------------------------
-----------------------                                ---------------------
--------------------       WELCOME TO Docker Control      ------------------
============================================================================
PREFACE
printf ${NCOL}

##---------------------------------------------------------- DEBUG OPTION
#DEBUG=["echo -e"|:], : means no-operation
DEBUG=:
##============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';  RED='\e[1;31m';  green='\e[0;32m';  GREEN='\e[1;32m';  yellow='\e[0;33m';   YELLOW='\e[1;33m';
blue='\e[0;34m'; BLUE='\e[1;34m'; cyan='\e[0;36m';   CYAN='\e[1;36m';   magenta='\e[0;35m';  NCOL='\e[0m';

#user setting
account=vc.integrator
home_dir="/data001/${account}"
user_id=$(id -u ${account})
group_id=$user_id
repo_url="10.158.4.241:8082"

#$1: command, #$2: conatainer name, #$3: container port, #$4: image name
cntr_cmd=$1; cntr_name=$2; cntr_port=$3; cntr_img=$4; cntr_file='';
#$DEBUG "cntr_cmd=[$1] cntr_name=[$2] cntr_port=[$3] cntr_img=[$4]"


##--------------------------- Menu Functions --------------------------------
##============================================================================
function ende_code(){
## ---------------------------------------------------------------------------
# encoding as variable: code env <keyname> <key>
# encoding as file: code en <keyfile> <key>
# decode de <keyfile>
local temp temp_var
local cmd=$1 tag=$2 key=$3
    case $cmd in
            en) [ -z "${key}" ] && ende_code help
    ;; dev|def) [ -z "${tag}" ] && ende_code help
    esac

    case $cmd in
         env) #encrypt to ENCODE_$tag
            declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
       ;; en) #encrypt to ~/.key_$tag
            echo $( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey ) > $HOME/.key_$tag
       ;; de) #decrypt from ENCODE_$tag, if error, decrypt from ~/.key_$tag
            temp=ENCODE_$tag; temp_var=${!temp} #must be indirect reference
            if (( 40 < ${#temp_var} )); then
                echo ${temp_var}| openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey 2> /dev/null
            else
                if [[ -f $HOME/.key_$tag ]]; then cat $HOME/.key_$tag | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey 
                else echo "key missing or server is incorrect";fi
                declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
            fi
       ;;list|debug)  #list up keycode for debugging
            declare -p |grep ENCODE 
       ;;help|*)
            [ "$cmd" = help ] || err "please check your command"
            info "variable is live during session, file is live permanent"
            echo "en/decoding as variable: dock ende_code env <keyname> <key>, ende_code de <key_id>"
            echo "en/decoding as file    : dock ende_code en <keyfile> <key>, ende_code de <key_id>"
            echo "ex) save file for vgit : dock ende_code env vgit ejladf69a79f8d79fdsqd"
            echo "ex) save var for lamp  : dock ende_code en  lamp ejladf69a79f8d79fdsqd"
            echo "ex) save var for arti  : dock ende_code en  arti ejladf69a79f8d79fdsqd"
            echo "ex) read key from lamp : dock ende_code de  lamp" 
            
            echo "list of current registered key"
            echo "$(ls -al ~/.key_*)" 
             
    esac
}

function echorun(){
## ---------------------------------------------------------------------------
# ex) echo docker images # must call without quote
    echo "\$ $@" ; eval "$*";
}

function dockdown(){
## ---------------------------------------------------------------------------
    local clone_path printlist
    file_tar=$(mktemp)
    echo "please refer first: http://vgit.lge.com/na/gitweb?p=devops/scm/infra/devenv.git;a=tree;f=dockerfile;hb=HEAD";
    #git clone ssh://vgit.lge.com:29420/devops/scm/infra/devenv.git -b devops_release ${clone_path}
        
    printf "${yellow}\n==================================================================================================="
    printf "\n      %s" "currently supported dockerfiles for projects"
    printf "\n---------------------------------------------------------------------------------------------------\n\n${NCOL}"

    listpath=( $(git archive --remote=ssh://vgit.lge.com:29420/devops/scm/infra/devenv.git devops_release:dockerfile -o ${file_tar} && tar -tf ${file_tar} | grep '.*/.*/$' ))
    printlist=$(declare -p listpath | sed 's/.*(\(.*\)).*/\1/')
    printf "%s\n" ${printlist}
    #git archive --remote=ssh://vgit.lge.com:29420/devops/scm/infra/devenv.git devops_release:dockerfile/honda/tsu . | tar -x -C .
    read -p "input project [Number]: " reply
    if [ -z "$reply" ]; then echo you have to input image number; return; fi
    echorun  tar -xvf ${file_tar} ${listpath[${reply}]}
}


function list_repo(){
## ---------------------------------------------------------------------------
    if [ -z "${KEY_ADMIN}" ]; then 
        echo "input artifactory password first !!!"
        echo "permanant usage: 'dock ende_code en  arti <KEY>' !!!"
        echo "temporary usage: 'dock ende_code env arti <KEY>' !!!"
        exit 1
    fi
    
    local i=0 printlist
    # Read the files of a directory
    #echo "curl -su 'admin':${KEY_ADMIN}  ${repo_url}/artifactory/api/docker/devops-docker/v2/_catalog"
    listimg=( $(curl -su 'admin':${KEY_ADMIN}  ${repo_url}/artifactory/api/docker/devops-docker/v2/_catalog |sed -n '2p' | sed 's/.*\[\(.*\)\].*/\1/'| tr -d '[\[\]",]') )
    printlist=$(declare -p listimg | sed 's/.*(\(.*\)).*/\1/')
    printf "%s\n" ${printlist}

    if [ "${listimg[0]}" = "errors" ];then echo "please verify your ID/PW"; exit 0;fi
}



function dockerhub(){
## ---------------------------------------------------------------------------
    local repo_path=${repo_url}/devops-docker
    local path input_img input_tag
    printf "${red}========== "$1" ========== ${NCOL}\n"

    echorun docker login ${repo_url}/artifactory-devops-docker.jfrog.io
    echo "arti url: http://${repo_url}/ui/repos/tree/General/devops-docker"

    case "${1%%(*}" in
        find)
            list_repo
            echo "[link] http://${repo_url}/ui/repos/tree/General/devops-docker%2Fcommon"
            ;;
        pull)
            list_repo
            read -p "must input image name [Number]: " input_img
            curl -su 'admin':${KEY_ADMIN}  ${repo_url}/artifactory/api/docker/devops-docker/v2/${listimg[${input_img}]}/tags/list |jq -C
            
            read -t 5 -p "default tag is latest otherwise input tag[2s]:" input_tag
            if [ -z "$input_img" ]; then echo you have to input image number; return; fi
            echorun docker pull ${repo_url}/devops-docker/${listimg[${input_img}]}:${input_tag:=latest}
            ;;
        push)
            list_repo
            docklist images
            read -p "must input Image [Name}: " cntr_img
            read -p "must input Repository path with tag [ex) vw/cockpit, vw/cockpit:latest, honda/26my/farm, honda/26my/farm:v1.0 ]: " path
            if [ "$cntr_img" = "" ];then echo "image is mandatory"; return 1; fi

            echorun docker tag ${cntr_img} ${repo_path}/${path}
            echorun docker push ${repo_path}/${path}
            ;;
         *) echo "[error] please check your command "
            ;;
    esac
}


function formatprint(){
## ---------------------------------------------------------------------------
    local index=0 line;

    #extract only "print format" from commands.
    list_port=()
    local cmd=( $(echo "$*" |sed 's/.*format *\({{.*}}|\).*/\1/;s/{{//g;s/}}|//g;s/\./ /g') )
    #declare -p cmd
    $DEBUG ${#cmd[@]}


    printf "${yellow}\n==================================================================================================="
    printf "\n      %s" "$*"
    printf "\n---------------------------------------------------------------------------------------------------\n\n${NCOL}"

    ##read as file from command result < <("$cmd")

    readarray -t arrayline < <("$@")
    arrayline=("${cmd[*]/%/|}" "${arrayline[@]}")
    #declare -p arrayline

    ##read one line from array "${arrayline[@]}"
    for line in "${arrayline[@]}"; do
        ##read one item from line "${line}"
        while read -d'|' item; do
            ##default handler for all items. remove spaces.
            width=-14;

            ##custom handler for each item.
            case ${cmd[${index}]} in
                ##width: display column width, minus left align, string replace
                CreatedAt)              width=-16; item=${item%:*};; #remove second
                Status)                 width=12;  item=${item/#Restarting*/NotWorking};; #change status Restarting to Notworking
                Ports)                  width=5;   temp=${item##*:}; item=${temp%->*};list_port+=(${item}) ;; #display port shortly
                Size)                   width=20;  item=${item/virtual/vir} ;;
                #Container size takes time too long, dont use size in docker ps
                #remove virtual memory
                Image|Repository)       width=18;  [[ $list_cmd != images ]] && item=${item##*/} ;; #remove Image path to make it short
                State|Driver)           width=10;; #only display width control
                Tag)                    width=8;;
                Names)                  width=20;;
                Name)                   width=30;;
                Mountpoint)             width=70;;
                ID)                     width=13;;
                *)                      width=16;;
            esac
            #printf "%d:" "${index}"
            printf "%${width}s|" "${item}"
            index=$(( ++index % ${#cmd[@]} ))
        done <<< "${line}"
        printf "\n--------------------------------------------------------------------------------------------------\n"
    done
}


function docklist(){
## ---------------------------------------------------------------------------
# $1: ps|images
# $2: --all|--size
    $DEBUG "[$1] [$2] [$3]"
    list_cmd=$1
    case $list_cmd in
        ##width: display column width, minus left align, string replace
        images) formatprint docker images --format '{{.CreatedAt}}|{{.Size}}|{{.ID}}|{{.Tag}}|{{.Repository}}|' ${@:2}
        ;; vol) formatprint docker volume ls --format '{{.Driver}}|{{.Name}}|{{.Mountpoint}}|' ${@:2}
        ;;  ps) 
              if [ "$2" = "--size" ]; then echo "Wait 10s... to get size of container!!"
                formatprint docker ps --format '{{.CreatedAt}}|{{.Ports}}|{{.State}}|{{.Status}}|{{.Size}}|{{.ID}}|{{.Names}}|{{.Image}}|' ${@:2}; 
              else 
                formatprint docker ps --format '{{.CreatedAt}}|{{.Ports}}|{{.State}}|{{.Status}}|{{.ID}}|{{.Names}}|{{.Image}}|' ${@:2};        fi
        ;;   *) formatprint docker images --format '{{.CreatedAt}}|{{.Size}}|{{.ID}}|{{.Tag}}|{{.Repository}}|' ${@:2}; 
                formatprint docker ps --format '{{.CreatedAt}}|{{.Ports}}|{{.State}}|{{.Status}}|{{.ID}}|{{.Names}}|{{.Image}}|' ${@:2};
    esac
}


function dockhello(){
## ---------------------------------------------------------------------------
    local tmppath

    printf "${red}========== "${FUNCNAME[0]}" ========== ${NCOL}\n"

    DOC_F=dockerfile.hello
    if ! [ -f "$DOC_F" ]; then 
        echo "make simplest dockerfile for test"
        echo "FROM ubuntu:18.04" > $DOC_F
        echo 'ENTRYPOINT ["/bin/bash", "-ex"]' >> $DOC_F
        echo 'CMD "echo HelloWorld!"' >> $DOC_F
    fi

    tmppath=$(readlink -f $DOC_F);
    if [ "${tmppath%/*}" = "${HOME}" ];then
        echo "You must move your [$DOC_F] to other dir not in HOME. " && exit 0;
    fi
    ## use DOCKER_BUILDKIT, under docker version 25.0.3
    echorun DOCKER_BUILDKIT=1 docker build --progress=plain -f $DOC_F -t $DOC_F .
    echo "please find generated dockerfile ${DOC_F}: "
    echo
    readlink -f $DOC_F
    return
}


function dockbuild(){
## ---------------------------------------------------------------------------

    local tmppath tmpfile
    printf "\nplease refer current images when building images\n"    
    docklist images

    printf "${red}========== "${FUNCNAME[0]}" ========== ${NCOL}\n"
    local today=$(date +"%y%m%d_%H")

    tmpfile=$(ls -tA1 *ockerfile* | head -1)
    printf "\n\nplease input your own input or use default !!!\n"
    read -p "input Dockerfile [FileName| Enter:${tmpfile:=Dockerfile}]: " cntr_file
    read -p "input Image [Name(lowercase)| Enter:$today]: " cntr_img

    if [ "$cntr_file" = "" ];then cntr_file="${tmpfile:=Dockerfile}"; fi
    tmppath=$(readlink -f $cntr_file);
    if [ "${tmppath%/*}" = "${HOME}" ];then
        printf "${red}This jois is not permitted in $HOME directory.${NCOL}\n" 
        printf "make new dir, place [$cntr_file] there and continue" && exit 0;

    fi
    if [ "$cntr_img" = "" ];then cntr_img=$today; fi
    echorun DOCKER_BUILDKIT=1 docker build --progress=plain -f ${cntr_file} -t ${cntr_img,,} . "$@" |& tee -a log.docker
    
    
    printf "docker build log is saved to ./log.docker"
}


function dockstart(){
## ---------------------------------------------------------------------------
    $DEBUG "$LINENO:[$cntr_cmd] [$cntr_name] [$cntr_port] [$cntr_img]"
    docklist images

    local recent_name=$(docker images --format '{{.Repository}}'|head -1)

    if [ -n "$(docker ps -q --filter "status=exited")" ]; then 
        read -p "this is stopped container, you can restart it manually, 'docker restart <container>'"
        docker ps --filter "status=exited"
    fi

    printf "\n\nPlease Input Image, ID is more accurate!!!\n"
    read -p "input Image ID/Repository [ImageID| Repository| Enter:$recent_name]: " cntr_img
    read -p "input Container [Name| Enter:${recent_name##*/}]: " cntr_name

    if [ "$cntr_img" = "" ];then cntr_img=${recent_name}; fi
    if [ "$cntr_name" = "" ];then cntr_name=${recent_name##*/}; fi

    if [ "$1" = "run" ];then
        printf "${red}========== "$1" ========== ${NCOL}\n"
        echorun docker run -dit --name ${cntr_name} ${cntr_img} /bin/bash -c 'echo HelloDocker !!!'
        return 0
    fi

    local i=7000
    while (( i < 10000 )); do
        if [[ ! "${list_port[*]}" =~ "$i" ]]; then cntr_port="$i"; break; fi
        ((i=i+10))
    done

    read -p "input Port [Port Number| Enter:${cntr_port}]: " 
    [ -n "${REPLY}" ] && cntr_port="${REPLY}"
    

    # create dirs&files in advanced, if not, these dir&file is created for root account.
    sudo -u ${account} mkdir -p ${home_dir}/Docker_MountDIR ${home_dir}/mirror ${home_dir}/.jfrog
    touch ${home_dir}/.ssh ${home_dir}/.profile ${home_dir}/.bashrc ${home_dir}/.gitconfig 

    ## warning
    ## if mount with ro, file is another copy from start
    ## if mount with ro, dir is ro permissioned from start
    docker run                                                                  \
        -dit --init --privileged --cap-add=ALL --restart="always"               \
        --name ${cntr_name}                                                     \
        -u ${user_id}:${group_id}                                               \
        -p ${cntr_port}:22                                                      \
        -v /etc/group:/etc/group:ro                                             \
        -v /etc/passwd:/etc/passwd:ro                                           \
        -v /etc/shadow:/etc/shadow:ro                                           \
        -v /etc/timezone:/etc/timezone:ro                                       \
        -v /etc/localtime:/etc/localtime:ro                                     \
        -v /etc/ssh:/etc/ssh:ro                                                 \
        -v /usr/local/bin:/usr/local/bin:ro                                     \
        -v /usr/bin/git-lfs:/usr/bin/git-lfs:ro                                 \
        -v /lib/modules:/lib/modules:ro                                         \
        -v ${home_dir}/.profile:${home_dir}/.profile:rw                         \
        -v ${home_dir}/.bashrc:${home_dir}/.bashrc:rw                           \
        -v ${home_dir}/.gitconfig:${home_dir}/.gitconfig:rw                     \
        -v ${home_dir}/.ssh:${home_dir}/.ssh:rw                                 \
        -v ${home_dir}/.jfrog:${home_dir}/.jfrog:rw                             \
        -v ${home_dir}/mirror:${home_dir}/mirror:rw                             \
        -v ${home_dir}/Docker_MountDIR:${home_dir}/Docker_MountDIR:rw           \
        ${cntr_img} /bin/bash -c 'sudo service ssh start && /bin/bash'

        #if [ $? -eq 0 ]; then docklist ps; fi
    return 0
}


function dockstoprm(){
## ---------------------------------------------------------------------------
    local cmd=$1
    local param="${@:2}"
    local cntr_name
    [ -z "${param}" ] && docklist ps --all
    printf "${red}========== stop & remove container ========== ${NCOL}\n"
    echo "Multiple container can be input with space ex) cntr1 cntr2 cntr3 ..."
    read -p "must input Container [Name| ID]: " cntr_name
    [ -z "${cntr_name}" ] && return
    echorun docker stop ${cntr_name}
    
    read -p "remove container?  [enter:continue| ctrl+c:exit]: "
    echorun docker rm ${cntr_name}
    
    if [ -n "$(docker volume ls -q)" ]; then 
    docklist vol
    read -p "continue to remove volume? [Name or ID| ctrl+c:exit]: "
    echorun docker volume rm --force ${REPLY}
    fi
    printf "\n\n"
}


function dockrmi(){
## ---------------------------------------------------------------------------
    local cmd=$1

    docklist images
    printf "${red}========== "$cmd" ========== ${NCOL}\n"
    printf "[docker rmi] command will be executed!! otherwise use [dock stop]\n"
    
    echo "Multiple image can be input with space ex) img1 img2 img3 ..."    
    read -p "must input Image ID/Repository or enter [ImageID| Repository]: "
    docker rmi ${REPLY}

    if [ $? -ne 0 ]; then
        read -p "docker rmi ${REPLY} --force [Enter:${REPLY}| Ctrl+C]: "
        if [ "$REPLY" = "" ]; then
            docker rmi ${REPLY} --force
        fi
    fi
}



function dockexec(){
## ---------------------------------------------------------------------------

    docklist ps --all
    printf "${red}========== "${FUNCNAME[0]}" ========== ${NCOL}\n"
    local recent_name=$(docker ps --format '{{.Names}}' |sed -n '1p'| sed 's/.*\///p')

    read -p "must input Container [ID| Name| Enter:$recent_name]: " cntr_name
    if [ -z "$cntr_name" ];then cntr_name=${recent_name}; fi
    printf '%s\n' \
    "docker exec -it ${cntr_name} /bin/bash"
    #"docker exec -w ${home_dir} -it ${cntr_name} /bin/bash"

    read -p "please confirm to run [Enter] :"
    case ${REPLY} in
    "") docker exec -it ${cntr_name} /bin/bash ;;
    #2) docker exec -w ${home_dir} -it ${cntr_name} /bin/bash;;
    #3) docker exec -w ${home_dir} -it ${cntr_name} /bin/bash;;
    esac
}


function dockdebug(){
## ---------------------------------------------------------------------------
    local reply
    docklist ps --all
    printf "${red}========== "${FUNCNAME[0]}" ========== ${NCOL}\n"
    read -p "must input Container [Name]: " cntr_name
    printf '%s\n' \
    "1) docker logs --tail 100 --follow --timestamps ${cntr_name}"\
    "2) docker logs --tail 100 --follow --timestamps ${cntr_name}"

    read -p "input Your choice [Number]: " reply
    case ${reply} in
    1) docker logs --tail 100 --follow --timestamps ${cntr_name} ;;
    esac
}


function dockclean(){
## ---------------------------------------------------------------------------
    temp_img=$(docker ps | awk "/${cntr_name}/ {print \$2}" | grep -v ID)
    echo    "############### [WARNING] ###############"
    echo    "!! [docker system prune] command will be executed !!
    docker network prune
    docker volume prune
    docker container prune
    docker image prune
    "
    printf "current total docker container is: " && docker ps --all -q | wc -l
    printf "current total docker images is: "    && docker images --all -q | wc -l

    #ask by confirm in docker system prune
    docker system prune --all
    
    echo "docker image prune --filter [label|until]"
    echo "docker image prune --filter="label=maintainer=joongkeun.kim@lge.com" #created image label with"
    echo "docker image prune --filter "until=120m" #created image for recent 120 min"
    
    printf "\nprune is done\n"
    printf "current total docker container is: " && docker ps --all -q | wc -l
    printf "current total docker images is: "    && docker images --all -q | wc -l

    return 0
}


function dockinfo(){
## ---------------------------------------------------------------------------
    read -p "docker info  [enter:continue| ctrl+c:exit]: "
    docker info
    exit 0
}


function dockcopy(){
## ---------------------------------------------------------------------------
    if [ -z "${cntr_name}" ];then 
        docklist ps --all
    read -p "must input Container [Name| ID]: " cntr_name;
    fi
    echorun docker exec -t $cntr_name /bin/bash -c 'tree -aL 2 /data001/vc.integrator'
    printf "\n${yellow}==== docker copy sample commands ====${NCOL}\n"
    printf "\n${YELLOW} ls docker files ${NCOL}\n"
    echo "docker exec -t $cntr_name /bin/bash -c 'ls -al /data001/vc.integrator'"
    printf "\n${YELLOW} copy between host & docker ${NCOL}\n"
    echo "docker cp $cntr_name:${home_dir}/.bashrc ./target_file"
    echo "docker cp source_file $cntr_name:${home_dir}/target_file"
    exit 0
}

function dockhelp(){
## ---------------------------------------------------------------------------
echo -e "
${green}
    example step:
    make image and start: build(image)>> start(container)>> exec(attach)>> stop(container)>> remove(image)
    get image and start : pull(image)>> start(container)>> exec(attach)>> stop(container)>> remove(image)
    make test image & start: hello(image)>> start(container)>> exec(attach)>> ...
    attach legacy container: list(img&cntr)>> exec(attach)>> ...
    get dockerfile from git: down(dockerfile)>> ...

${yellow}
    command category:
    common) list, clean, help
    image) image/images --all, build, hello, find, pull, push, rmi/remove, down
    container) ps/ps --all, start, run, exec, debug, stop/rm

${cyan}
    command usage:
    dock cmd: ex) dock list
    dock >> select menu#: ex) dock >> input #1
${NCOL} "

    read -p "docker help  [enter:continue| ctrl+c:exit]: "
    docker help
}

MENU=(
    'list(img&cntr)' 'images(list img)' 'ps(list cntr)' 'build(dockerfile)'
    'start(run++ img)' 'exec(attach cntr)' 'hello(testimg)' 'run(just run)' 
    'stop(&rm ctnr)' 'remove(img)' 'clean(prune all)' 'debug(log)' 'find(in arti)'
    'pull(from arti)' 'push(to arti)' 'down(dockerfile)' 'copy(between host)' 'help'
)

function handler_menu(){
## ---------------------------------------------------------------------------
printf ${green}
cat << PREFACE
===================================================================================================
 the menu for docker tools
 help: http://collab.lge.com/main/x/8X_taQ
 -------------------------------------------------------------------------------------------------
 account=$account, user_id=$(id -u ${account}), group_id=$user_id
 home_dir=${home_dir}"
 -------------------------------------------------------------------------------------------------
 o step: build/pull(image)>> start(container)>> exec(attach)>> stop(container)>> remove(image)
 o step: hello(image)>> run(container)>> exec(attach)>> ...

 supported command category: ex) dock list
 common) list, clean, help
 image) image/images --all, build, hello, find, pull, push, rmi/remove
 container) ps/ps --all, start, run, exec, debug, stop/rm
===================================================================================================
PREFACE
printf ${NCOL}

    #local COLUMNS=30
    #local columns="$(tput cols)"
    #multi-line PS3
    PS3=$'\e[00;34m------------------------------------------------------------------------------------------\e[0m'\
$'\nstep: build/pull(image)>> start(container)>> exec(attach)>> stop(container)>> remove(image)'\
$'\nstep: hello(image)>> run(container)>> exec(attach)>> ...'\
$'\n\e[00;35m=== Please input command! [Number:menu, Ctrl+c:exit] === : \e[0m'

    select CHOICE in "${MENU[@]}"
    do
        dockmenu "${CHOICE%%(*}";
    done    
}


function dockmenu(){
## ---------------------------------------------------------------------------
local ret=0
    case "$1" in
        list)           docklist "${@:2}"                                     ;;
          images|ps)    docklist "${@:1}"                                     ;;
          image)        docklist images "${@:2}"                              ;;
        build)          dockbuild "${@:2}"                                    ;;
          hello)        dockhello;                                            ;;
        start)          dockstart;                                            ;;
          run)          dockstart run                                         ;;
          exec)         dockexec                                              ;;
          debug)        dockdebug                                             ;;
        stop|rm)        dockstoprm "${@:1}"                                   ;;
          rmi|remove)   dockrmi                                               ;;
          clean)        dockclean;                                            ;;
        pull|push|find) dockerhub "${@:1}"                                    ;;
          down)         dockdown  "${@:2}"                                    ;;
        copy)           dockcopy "${@:2}"                                     ;;
        info|status)    dockinfo "${@:2}"                                     ;;
        ende_code)      "${@:1}"                                              ;;
        help)           dockhelp "${@:2}"                                     ;;
        "")             handler_menu "${@}"                                   ;;
        *)              docker "${@}"                             
                                                                   return $ret;;
    esac
}


#for source script,
function ____dock(){
## ---------------------------------------------------------------------------
    echo "this is called from sourced dock script"
    dockmenu $@
}

##============================================================================
## Main
##============================================================================
# check if called from source or not.
KEY_ADMIN=$(ende_code de arti)

(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ $sourced -eq 0 ]; then dockmenu $@;else echo "plz run without source." && return; fi
