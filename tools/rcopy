#!/bin/bash
# ==========================================================================
#  readme    : rupdatesync handler
#  mail      : joongkeun.kim@lge.com/av9300@gmail.com
# ==========================================================================


printf ${CYAN}
cat << PREFACE > /dev/null
============================================================================
---------------------------           +             ------------------------
-----------------------                                ---------------------
--------------------       WELCOME TO Docker Control      ------------------
============================================================================
PREFACE
printf ${NCOL}

##---------------------------------------------------------- DEBUG OPTION
#DEBUG=["echo -e"|:], : means no-operation
DEBUG=:
##============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';  RED='\e[1;31m';  green='\e[0;32m';  GREEN='\e[1;32m';  yellow='\e[0;33m';   YELLOW='\e[1;33m';
blue='\e[0;34m'; BLUE='\e[1;34m'; cyan='\e[0;36m';   CYAN='\e[1;36m';   magenta='\e[0;35m';  NCOL='\e[0m';

#user setting
account=vc.integrator
home_dir="/data001/${account}"
user_id=$(id -u ${account})
group_id=$user_id
repo_url="10.158.4.241:8082"


##--------------------------- Menu Functions --------------------------------
##============================================================================
function echorun(){
## ---------------------------------------------------------------------------
# ex) echo rupdatesync images # must call without quote
    echo "\$ $@" ; "$@";
}




function rupdatesync_hub(){
## ---------------------------------------------------------------------------
    local repo_path=${repo_url}/devops-rupdatesync
    local path
    printf "${red}========== "$1" ========== ${NCOL}\n"

    echorun rupdatesync login ${repo_url}/artifactory-devops-rupdatesync.jfrog.io

    case "${1%%(*}" in
        find)
            list_repo
            echo "[link] http://${repo_url}/ui/repos/tree/General/devops-rupdatesync%2Fcommon"
            ;;
        pull)
            list_repo
            read -p "must input image name [Number]: " input_img
            if [ -z "$input_img" ]; then echo you have to input image number; return; fi
            echorun rupdatesync pull ${repo_url}/devops-rupdatesync/${listimg[${input_img}]}
            ;;
        push)
            list images
            read -p "must input Image [Name}: " cntr_img
            read -p "must input Repository path [ex) vw/imgname]: " path
            if [ "$cntr_img" = "" ];then echo "image is mandatory"; return 1; fi

            echorun rupdatesync tag ${cntr_img} ${repo_path}/${path}
            echorun rupdatesync push ${repo_path}/${path}
            ;;
         *) echo "[error] please check your command "
            ;;
    esac
}




function cleancopy__(){
## ---------------------------------------------------------------------------
    local reply
    printf "${red}========== "${FUNCNAME[0]}" ========== ${NCOL}\n"
    
    time ( 
        tar -cvzf - data_small/ |split --bytes=24MB - data2/"parts.gz"; 
        ls data2/ | xargs -I{} -P5 -n1 rupdatesync -av --progress --delete data2/{} vc.integrator@10.207.82.25:/home/vc.integrator/speedtest/data_small/
    )

    read -p "must input Container [Name]: " cntr_name
    printf '%s\n' \
    "1) rupdatesync logs --tail 100 --follow --timestamps ${cntr_name}"\
    "2) rupdatesync logs --tail 100 --follow --timestamps ${cntr_name}"

    read -p "input Your choice [Number]: " reply
    case ${reply} in
    1) rupdatesync logs --tail 100 --follow --timestamps ${cntr_name} ;;
    esac
}




function formatprint(){
## ---------------------------------------------------------------------------
    local index=0 line;

    #extract only "print format" from commands.
    list_port=()
    local cmd=( $(echo "$*" |sed 's/.*format *\({{.*}}|\).*/\1/;s/{{//g;s/}}|//g;s/\./ /g') )
    #declare -p cmd
    $DEBUG ${#cmd[@]}


    printf "${yellow}\n==================================================================================================="
    printf "\n      %s" "$*"
    printf "\n---------------------------------------------------------------------------------------------------\n\n${NCOL}"

    ##read as file from command result < <("$cmd")

    readarray -t arrayline < <("$@")
    arrayline=("${cmd[*]/%/|}" "${arrayline[@]}")
    #declare -p arrayline

    ##read one line from array "${arrayline[@]}"
    for line in "${arrayline[@]}"; do
        ##read one item from line "${line}"
        while read -d'|' item; do
            ##default handler for all items. remove spaces.
            width=-14;

            ##custom handler for each item.
            case ${cmd[${index}]} in
                ##width: display column width, minus left align, string replace
                CreatedAt)              width=-16; item=${item%:*};; #remove second
                Status)                 width=12;  item=${item/#Restarting*/NotWorking};; #change status Restarting to Notworking
                Ports)                  width=5;   temp=${item##*:}; item=${temp%->*};list_port+=(${item}) ;; #display port shortly
                Size)                   width=8;   item=${item/%(vir*/} ;;
                #Container size takes time too long, dont use size in docker ps
                #remove virtual memory
                Image|Repository)       width=16;  [[ $list_cmd != images ]] && item=${item##*/} ;; #remove Image path to make it short
                State)                  width=10;; #only display width control
                Tag)                    width=8;;
                Names)                  width=30;;
                Repository)             width=17;;
                ID)                     width=13;;
                *)                      width=16;;
            esac
            #printf "%d:" "${index}"
            printf "%${width}s|" "${item}"
            index=$(( ++index % ${#cmd[@]} ))
        done <<< "${line}"
        printf "\n--------------------------------------------------------------------------------------------------\n"
    done
}


function cleancopy(){
## ---------------------------------------------------------------------------
    $DEBUG "[$1] [$2] [$3]"
    NJOB=5
    list_cmd=$1
    case $list_cmd in
        tarrsh) echo ""
        ;;
        rsync)
            local path_temp=$(mktemp -p $LOCAL_PATH/..)
            if [ ! -d "${path_temp}" ] ; then err "path is not existed" && return; fi
            tar -cvzf - $LOCAL_PATH |split --bytes=64MB - ${path_temp}/"parts.gz"; 
            find ${path_temp} -type f -name "*" |xargs -I{} -P$NJOB -n1 rsync -av --progress --delete {} $REMOTE_ACCOUNT@$REMOTE_SERVER:${REMOTE_PATH}
            ssh $REMOTE_ACCOUNT@$REMOTE_SERVER cat ${REMOTE_PATH}/parts.gz* | tar xzvf -
        ;;
        fdt) formatprint docker ps --format '{{.CreatedAt}}|{{.Ports}}|{{.State}}|{{.Status}}|{{.ID}}|{{.Image}}|{{.Names}}|' ${@:2};;
        *)              
            local path_temp=$(mktemp -p $LOCAL_PATH/..)
            if [ ! -d "${path_temp}" ] ; then err "path is not existed" && return; fi
            echo tar -cvzf - $LOCAL_PATH |split --bytes=64MB - ${path_temp}/"parts.gz"; 
            echo find ${path_temp} -type f -name "*" |xargs -I{} -P$NJOB -n1 rsync -av --progress --delete {} $REMOTE_ACCOUNT@$REMOTE_SERVER:${REMOTE_PATH}
            echo ssh $REMOTE_ACCOUNT@$REMOTE_SERVER cat ${REMOTE_PATH}/parts.gz* | tar xzvf -
        
        ;;
    esac
}


function handler_menu(){
## ---------------------------------------------------------------------------
printf ${green}
cat << PREFACE
===================================================================================================
 the menu for rupdatesync tools
 -------------------------------------------------------------------------------------------------
 account=$account, user_id=$(id -u ${account}), group_id=$user_id
 home_dir=${home_dir}"
 -------------------------------------------------------------------------------------------------
 check: 2개 서버간 data 교환이 가능한지 권한확인
 compress: 분할만 할지, 분할압축할지 (단 통신시 압축은 안하고 필요한 경우 미리 압축하는것으로 정함)
 copy: rsync를 쓸지, tar  & ssh를 쓸지, fdt를 쓸지 (전송은 무조건 가장빠른것으로 전송한다는 것을 전제)
 updatesync: update된 파일만 받기, 파일중 update된 부분만받기, 삭제/추가/변경등 전체항목 동일한지 확인
 report: 전송결과 report
 
 o 1step: check(prepare copy)>> compress(with split)>> copy>> report(result)
 o 1step: check(prepare copy)>> auto(compress & copy)>> report(result)
 o 2step: check(prepare copy)>> updatesync>> report(result)
 

 supported command category: ex) dock list
 common) list, clear
 image) image/images --all, build, hello, find, pull, push, rmi/remove
 container) ps/ps --all, start, run, exec, debug, stop/rm
===================================================================================================
PREFACE
printf ${NCOL}

    #local COLUMNS=30
    #local columns="$(tput cols)"
    PS3=$'\e[00;35m=== Please input command! [Number:menu, Ctrl+c:exit] === : \e[0m'
    select CHOICE in 'check [prepare copy]' 'auto [compress & 1st copy]' 'compress [only compress]' \
        'copy [first copy]' 'updatesync [update updatesync]' 'report [show copy result]'
    do
        handle_commands $CHOICE
    done
}


function handle_commands(){
## ---------------------------------------------------------------------------
local ret=0
    echo KJK_DEBUG "${1%%[*}"
    case "${1%%[*}" in
        check) check "${@:2}"                                               ;;
        report) report "${@:2}"                                             ;;
        compress) compress "${@:2}"                                         ;;
        cleancopy) cleancopy "${@:2}"                                                 ;;
        updatesync) updatesync "${@:2}"                                                 ;;
        auto) compress "${@:2}"                                             
              cleancopy "${@:2}"                                                 ;;
        "") handler_menu "${@}"                                             ;;
        *) echo copy "${@}"
          return $ret;;
    esac
}


##============================================================================
## Main
##============================================================================
#set global variable
## REMOTE_INFO=vc.integrator@10.207.82.25:/home/vc.integrator/speedtest/data_small/
LOCAL_ACCOUNT=${1%%@*} #remove maxium matched word from last
LOCAL_SERVER=${1#*@}; LOCAL_SERVER=${LOCAL_SERVER%:*}
LOCAL_PATH=${1##*:} #remove maxium matched word from front

REMOTE_ACCOUNT=${2%%@*} #remove maxium matched word from last
REMOTE_SERVER=${2#*@}; REMOTE_SERVER=${REMOTE_SERVER%:*}
REMOTE_PATH=${2##*:} #remove maxium matched word from front

echo "[$LOCAL_ACCOUNT][$LOCAL_SERVER][$LOCAL_PATH]" 
echo "[$REMOTE_ACCOUNT][$REMOTE_SERVER][$REMOTE_PATH]"

(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ $sourced -eq 0 ]; then handle_commands $@; fi
