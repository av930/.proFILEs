#!/bin/bash
# ==========================================================================
#  readme    : docker handler
#  mail      : joongkeun.kim@lge.com/av9300@gmail.com
# ==========================================================================
LC_ALL=ko_KR.UTF-8

printf ${CYAN}
cat << PREFACE > /dev/null
============================================================================
---------------------------           +             ------------------------
-----------------------                                ---------------------
--------------------       환영합니다. VSCDM을 조회합니다.        ------------------
============================================================================
PREFACE
printf ${NCOL}

##---------------------------------------------------------- DEBUG OPTION
#DEBUG=["echo -e"|:], : means no-operation
DEBUG=:
##============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';  RED='\e[1;31m';  green='\e[0;32m';  GREEN='\e[1;32m';  yellow='\e[0;33m';   YELLOW='\e[1;33m';
blue='\e[0;34m'; BLUE='\e[1;34m'; cyan='\e[0;36m';   CYAN='\e[1;36m';   magenta='\e[0;35m';  NCOL='\e[0m';

#user setting
account=vc.integrator
home_dir="/data001/${account}"
user_id=$(id -u ${account})
group_id=$user_id
repo_url="10.158.4.241:8082"



##--------------------------- Menu Functions --------------------------------
##============================================================================
function ende_code(){
## ---------------------------------------------------------------------------
# en/decoding as variable: code env <keyname> <key>; code dev <keyname>
# en/decoding as file: code enf <keyfile> <key>; code def <keyfile>
local temp temp_var
local cmd=$1 tag=$2 key=$3
    case $cmd in
    env|enf) [ -z "${key}" ] && ende_code help
    ;; dev|def) [ -z "${tag}" ] && ende_code help
    esac

    case $cmd in
        help) info "variable is live during session, file is live permanent"
            echo "en/decoding as variable: ende_code env <keyname> <key>, ende_code dev <keyname>"
            echo "en/decoding as file    : ende_code enf <keyfile> <key>, ende_code def <keyfile>"
        echo "ex) save file for vgit : ende_code enf vgit ejladf69a79f8d79fdsqd02"
        echo "ex) save var for lamp  : ende_code env lamp ejladf69a79f8d79fdsqd02"

       ;;env) #encrypt to ENCODE_$tag
            declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
       ;;dev) #decrypt from ENCODE_$tag
            temp=ENCODE_$tag; temp_var=${!temp} #must be indirect reference
            if (( 40 < ${#temp_var} )); then
                echo ${temp_var}| openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey 2> /dev/null
            else
                cat $HOME/.key_$tag | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey
                declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
            fi
       ;;list|debug)  #list up keycode for debugging
            declare -p |grep ENCODE

       ;;enf) #encrypt to ~/.key_$tag
            echo $( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey ) > $HOME/.key_$tag
       ;;def) ##decrypt from ~/.key_$tag & save to variable ENCODE_$tag
            cat $HOME/.key_$tag | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey
    esac
}


function echorun(){
## ---------------------------------------------------------------------------
# ex) echo docker images # must call without quote
    echo "\$ $@" ; "$@";
}


MENU=(
    'all' 'build' 'project' 'release' 'file' 'review' 'commit'
)

function handler_menu(){
## ---------------------------------------------------------------------------
printf ${green}
cat << PREFACE
===================================================================================================
 read config from VSCDM
 -------------------------------------------------------------------------------------------------
 o step: vscdm list >> vscdm [product] all >> vscdm [product] build
 모델찾기
 ex) vscdm help                           ## 명령어 설명을 보여준다.
 ex) vscdm                                ## 개발하는 모델을 보여준다. 기본값 최근 1년안에 수정한 모든모델 
 ex) vscdm 3month                         ## 최근 3달동안 수정한 모델만 보여준다. day, month, year 지원
 ex) vscdm HONDA                          ## honda 라는 string을 가진 모든 모델
 내용보기
 ex) vscdm HONDA_25_5MY build             ## HONDA_25_5MY의 build 관련 설정을 보여준다.
 ex) vscdm HONDA_25_5MY all               ## HONDA_25_5MY의 모든 설정을 보여준다.
 ex) vscdm HONDA_25_5MY all -[cCrMS]      ## 출력 format을 변경하기 위해 jq option을 넣을수 있다.
     vscdm HONDA_25_5MY all -rM > a.txt   ## json포멧이 아닌 a.txt파일로 출력한다.
===================================================================================================
PREFACE
printf ${NCOL}

    #local COLUMNS=30
    #local columns="$(tput cols)"
    #multi-line PS3
    PS3=$'\e[00;34m------------------------------------------------------------------------------------------\e[0m'\
$'\nstep: build/pull(image)>> start(container)>> exec(attach)>> stop(container)>> remove(image)'\
$'\nstep: hello(image)>> run(container)>> exec(attach)>> ...'\
$'\n\e[00;35m=== Please input command! [Number:menu, Ctrl+c:exit] === : \e[0m'

    select CHOICE in "${MENU[@]}"
    do
        echo "${CHOICE%_*}";
        handle_commands ${product} "${CHOICE%_*}";
    done
}


function read_product(){
## ---------------------------------------------------------------------------
#cmd=honda_25_5my
#field
    local cmd=$1
    local source=$(mktemp)
    local format='date +%Y-%m-%d'

    case ${cmd} in
            *day) cmd=$(${format} -d"${cmd:0:1} day ago")  ;            date="and reg_date >= '${cmd}'"
        ;;*month) cmd=$(${format} -d"${cmd:0:1} month ago");            date="and reg_date >= '${cmd}'"
        ;; ?year) cmd=$(${format} -d"${cmd:0:1} year ago") ;            date="and reg_date >= '${cmd}'" 
        ;;     *) ## 날짜입력포맷 잘못된 경우는 default 1년으로 처리
                  if [[ ${cmd} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then date="and reg_date >= '${cmd}'"
                  else 
                      date="and reg_date >= '$(${format} -d'2 year ago')'"
                      filter="and cnf_nm LIKE '%${cmd}%'"
                      read -p  "default search date : 2 year or input 'vscdm help' "                       
                  fi
    esac

    #SELECT proj_cd FROM project_tbl WHERE is_disabled=0
    
    MYSQL_PWD=$(ende_code def vscdm) mysql -hvscdm.lge.com -uroot vscdm_db -sB <<QUERY >${source}
    SELECT cnf_nm FROM config_tbl WHERE is_disabled=0 ${date} ${filter}
QUERY

    #SELECT cnf_nm FROM config_tbl WHERE is_disabled=0 ${date}
    #SELECT cnf_nm FROM config_tbl WHERE is_disabled=0 and reg_date >= '${cmd}'
    #SELECT cnf_nm FROM config_tbl WHERE is_disabled=0 and reg_date >= '${cmd}' and cnf_nm = 'honda_25_5my'

    ## extract json body
    cat ${source}| sed -E 's#(.*)_[0-9]+$#\1#' ${source} |sort -f|uniq |pr -4 -t -W200 
    
    printf "\n\nplease choose PRODUCT ex) vscdm HONDA_25_5MY "
    printf "[${MENU[*]/%/|} ...]\n"
}


function read_config(){
## ---------------------------------------------------------------------------
#product=honda_25_5my
#field
    product=${1:=${product}}
    #product=${1:=${product:?"vscdm [empty-product]"}}
    local field=$2
    local option=$3
    local source=$(mktemp)
    local target=$(mktemp)

    ## retrieve DB by HEREDOC
    MYSQL_PWD=$(ende_code def vscdm) mysql -hvscdm.lge.com -uroot vscdm_db -sB <<QUERY >${source}
    SELECT * FROM config_tbl WHERE is_disabled=0 and cnf_nm = '${product}'
QUERY

    ## remove empty line
    #sed -i '/^[[:space:]]$/d' ${source}

    ## extract json body
    echo '{' > ${target}
    cat ${source}| cut -d'{' -f2- | rev |cut -d'}' -f2- |rev >> ${target}
    echo '}' >> ${target}
    ## choose print format
    cat ${target} |jq ${option:=-C} ".${field}"
}



function clone_config(){
## ---------------------------------------------------------------------------
#product=honda_25_5my
#field
    product=${1:=${product}}
    local target=$2
    #product=${1:=${product:?"vscdm [empty-product]"}}
    local source=$(mktemp)

    MYSQL_PWD=$(ende_code def vscdm) mysql -hvscdm.lge.com -uroot vscdm_db -sB <<QUERY >${source}
    INSERT INTO config_tbl ( cnf_id, '${target}', proj_id, proj_cd, cmmt_msg_rul, proj_cnf, file_sys_cnf, bld_data, rvr, rls_cnf, is_disabled, reg_user_id, reg_dt, reg_date )
    SELECT cnf_id, cnf_nm, proj_id, proj_cd, cmmt_msg_rul, proj_cnf, file_sys_cnf, bld_data, rvr, rls_cnf, is_disabled, reg_user_id, reg_dt, reg_date FROM config_tbl WHERE is_disabled=0 and cnf_nm = '${product}'
QUERY
    cat ${source}
}


function handle_commands(){
## ---------------------------------------------------------------------------
product=$1
local ret=0
local SEP='~'
local field=$2
local option=$3
    echo "${product}${SEP}${field}" 
    case "${product}${SEP}${field}" in
                 *${SEP}build) read_config  ${product} "build_data" ${option}
        ;;     *${SEP}project) read_config  ${product} "proj_config" ${option}
        ;;     *${SEP}release) read_config  ${product} "release_cfg" ${option}
        ;;        *${SEP}file) read_config  ${product} "file_system_config" ${option}
        ;;      *${SEP}review) read_config  ${product} "reviewers" ${option}
        ;;      *${SEP}commit) read_config  ${product} "commit_msg_rule" ${option}
        ;;         *${SEP}all) read_config  ${product} '' ${option}
        ;;       *${SEP}clone) : #clone_config ${product} ""
        ;;        help${SEP}*) handler_menu "${@}"
        ;;     ${SEP}|*${SEP}) read_product ${product} 
          return $ret;;
    esac
}


##============================================================================
## Main
##============================================================================
# check if called from source or not.
(return 0 2>/dev/null) && sourced=1 || sourced=0
if [ $sourced -eq 0 ]; then handle_commands $@;else echo "plz run without source." && return; fi
