#!/bin/bash
# ===============================================================================
#  mail: joongkeun.kim@lge.com, av9300@gmail.com
#  this file should be sourced early step in script: source ./prelibrary
# ===============================================================================
#
#### ============================================================================
#### predefined variable
#### ============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';     RED='\e[1;31m';     green='\e[0;32m';       GREEN='\e[1;32m';
yellow='\e[0;33m';  YELLOW='\e[1;33m';  blue='\e[0;34m';        BLUE='\e[1;34m';
cyan='\e[0;36m';    CYAN='\e[1;36m';    magenta='\e[0;35m';     brown='\e[0;33m';
NCOL='\e[0m';       outline=${cyan};    inline=${yellow}; 

file_error=~/.repoconfig/repo.error

## ---------------------------------------------------------------------------
# log message to stderr
# $1: message
_line="--------------------------------------------------------------------------------------"

lineup="￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣"
linedn="______________________________________________________________________________________"
linemi="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
linedb="〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓"
## dlog, dbar, log can printf special charactor >> << | || , etc
log()    { printf "%b\\n" "${*}"  ;}
dlog()   { printf "%b\\n" "${YELLOW}$1 ${NCOL} ${@:2}";}
clog()   { log "${cyan}$1 ${NCOL} ${@:2}"  ;}
info()   { log "${GREEN}INFO: ${NCOL} ${*}"  ;}
warn()   { log "${YELLOW}WARN: ${NCOL} ${*}" ;}
err()    { log "${RED}ERROR: ${NCOL} ${*}" > /dev/stderr ;}
pCount() { tee >(let sum="$(wc -l) + ${1:-0}"; clog "#count:" "$((sum<0?0:+sum))" ) ;}


#${2:+[$2] }: if $2 exist, use '[$2] '
#${_line:(${2:+3}+${#2})}: if $2 is exist, skip 3 '-' chars for '[] ' chars
## supprort 2 _line type: bar inline, bar outline
bar()    { printf "\n${!1}%s%s ${NCOL}\n" "${2:+[$2] }" "${_line:(${2:+3}+${#2})}" ;}


under()  { 
    local temp="${1}" ; local ret=''
    if [ "${1:(-2)}" = "\n" ]; then temp=${temp::-2}; ret="\n"; fi
    printf "\n${green}〓〓〓   ${CYAN}%b${green}\n%b${NCOL}" "${temp}" "${linedb}${ret}";
}


function printToFILE(){ 
## ---------------------------------------------------------------------------
## printToFILE $(mktemp) title contents title-color
## $1: file, ## $2: head-msg, ## $3: content, ## $4: tail-msg

    case $1 in
    create) printfile=$(mktemp);;
    flush) 
        if [ -f "$printfile" ]; then 
            cat $printfile
            rm -f $printfile; 
        fi ;;
    screen) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" ;;
    both) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" 2>&1 | tee -a $printfile;;
    *) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" >> $printfile;;
    esac
}


function showRUN(){ echo "\$> $@"; "$@" ; return $?; }
## ---------------------------------------------------------------------------
# show command before execution
# $1: command
# usage: showRUN repo sync -qcj${njobs:-16} --no-tags --no-clone-bundle $1


function showRUNQ(){ 
## ---------------------------------------------------------------------------
# show command before execution
# $1: command
# usage: showRUN repo sync -qcj${njobs:-16} --no-tags --no-clone-bundle $1
    if [ "$1" = y ]; then 
        echo "\$ ${@:2}"; 
        read -p "choose [y:continue| ctrl+c:break] : " 
        #if [ "$REPLY" == 'y' ]; then "eval ${@:2}" ; fi 
        if [ "$REPLY" == 'y' ]; then eval "${@:2}" ; fi 
    else
        echo "\$ ${@}"; 
        eval "${@}"
    fi  
}


## ---------------------------------------------------------------------------
# $1: message
# $2: exit code
function die() { local m="$1"; local e=${2-1}; echo "$m"; exit $e; }
function is_root() { [ $(id -u) -eq 0 ] && echo 1 || echo 0 ;}


function getCurrentIP(){
## ---------------------------------------------------------------------------
# get current ip-address

    default_ip=172.0.0.1

    readarray -t a <<<"$(hostname -I) $SSH_CONNECTION"
    for ip in ${a[@]}; do
        max=$(grep -o $ip <<< ${a[*]} | wc -l)
        if [ $max -eq 2 ] ;then default_ip=$ip && echo $ip && break; fi
    done
}


function checkifSHA(){
## ---------------------------------------------------------------------------
# check if SHA
    case $1 in
      *[!0-9A-Fa-f]* | "" ) return 1 ;;
      * ) return 0;;
    esac   
}


function ende_code(){
## ---------------------------------------------------------------------------
# encoding as variable: code env <keyname> <key>
# encoding as file: code en <keyfile> <key>
# decode de <keyfile>
local temp temp_var
local cmd=$1 tag=$2 key=$3
    case $cmd in
            en) [ -z "${key}" ] && ende_code help
    ;; dev|def) [ -z "${tag}" ] && ende_code help
    esac

    case $cmd in
         env) #encrypt to ENCODE_$tag
            declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
       ;; en) #encrypt to ~/.key_$tag
            echo $( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey ) > $HOME/.key_$tag
       ;; de) #decrypt from ENCODE_$tag, if error, decrypt from ~/.key_$tag
            temp=ENCODE_$tag; temp_var=${!temp} #must be indirect reference
            if (( 40 < ${#temp_var} )); then
                echo ${temp_var}| openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey 2> /dev/null
            else
                if [[ -f $HOME/.key_$tag ]]; then cat $HOME/.key_$tag | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey 
                else warn "key missing or server is incorrect";fi
                declare -g "ENCODE_$tag=$( echo $key | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey )"
            fi
       ;;list|debug)  #list up keycode for debugging
            declare -p |grep ENCODE 
       ;;help|*)
            [ "$cmd" = help ] || err "please check your command"
            info "variable is live during session, file is live permanent"
            echo "en/decoding as variable: ende_code env <keyname> <key>, ende_code de <key_id>"
            echo "en/decoding as file    : ende_code en <keyfile> <key>, ende_code de <key_id>"
            echo "ex) save file for vgit : ende_code env vgit ejladf69a79f8d79fdsqd"
            echo "ex) save var for lamp  : ende_code en  lamp ejladf69a79f8d79fdsqd"
            echo "ex) save var for arti  : ende_code en  arti ejladf69a79f8d79fdsqd"
            echo "ex) read key from lamp : ende_code de  lamp" 
            
            echo "list of current registered key"
            echo "$(ls -al ~/.key_*)" 
             
    esac
}


#### ============================================================================
#### predefined function
#### ============================================================================
function show_menu_do(){
## ---------------------------------------------------------------------------
# [call] show_menu_do "${INPUT}" #inputs should be divided with white spaces
# show the menu and make user select one from it.
    local lines
    #should be up one token
    lines=($1)
    if [[ ${#lines[@]} = 0 ]]; then
        echo "Not found"
        return 1
    fi
    local pathname
    local choice
    if [[ ${#lines[@]} > 1 ]]; then
        while [[ -z "$pathname" ]]; do
            local index=1
            local line
            for line in ${lines[@]}; do
                printf "%6s %s\n" "[$index]" $line
                index=$(($index + 1))
            done
            echo
            echo -n "Select one: "
            unset choice
            read choice
            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then
                echo "Invalid choice"
                continue
            fi
            pathname=${lines[$(($choice-1))]}
        done
    else
        # even though zsh arrays are 1-based, $foo[0] is an alias for $foo[1]
        pathname=${lines[0]}
    fi
     RET=$pathname
     return 0
}


function handler_args(){
## ---------------------------------------------------------------------------
# [call] handler_args $@  #$@ command paramter
# Hander Arguments

    local ret
    local options
    while getopts es: options 2> /dev/null
    do
       case $options in
          e) run_emul; ret=processed;;
          d) run_ddms; ret=processed;;
          \?) printf "${RED}Only -a,-e,-s are valid [$options] ${NCOL}\n"
            handler_menu
            ret=processed;;
       esac
    done

    if ! [ "$ret" = "processed" ]; then
        handler_menu
    fi
}


function print_menu() {
## ---------------------------------------------------------------------------
# called from run_menu

    local menu_items=("$@")
    local menu_limit=$(( ${#menu_items[@]} - 1 ))  
    
    printf "${yellow}<< choose with arrow ←↑↓→ or num-key>>${NCOL}\n"
    printf "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
    for (( i = 0; i < $menu_limit; ++i ))
    do
        if [ "$i" = "${menu_items[$menu_limit]}" ]
        then  printf "${CYAN}->${NCOL} %02d: ${menu_items[i]}\n" "$i"
        else  printf "   %02d: ${menu_items[i]}\n" "$i"
        fi
    done
}


function __run_menu() {
## --------------------------------------------------------------------------- 
# refresh menu when cursor move and number input

    menu_selected=""
    local menu_items=("$@" "0" ) #0 is endmark
    local menu_size=${#menu_items[@]}
    local menu_limit=$((menu_size - 1))

    clear
    print_menu "${menu_items[@]}"
    
    while read -rsn1 input
    do
        case "$input" in
            $'\x1B')  # ESC ASCII code (https://dirask.com/posts/ASCII-Table-pJ3Y0j)
                read -rsn1 -t 0.1 input
                if [ "$input" = "[" ]  # occurs before arrow code
                then
                    read -rsn1 -t 0.1 input
                    case "$input" in
                        A)  # Up Arrow
                            if [ "${menu_items[$menu_limit]}" -ge 1 ]
                            then
                                menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} - 1 ))
                                clear
                                print_menu "${menu_items[@]}"
                            fi;;
                        B)  # Down Arrow
                            if [ "${menu_items[$menu_limit]}" -lt "$menu_limit" ]
                            then
                                menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} + 1 ))
                                clear
                                print_menu "${menu_items[@]}"
                            fi;;
                    esac
                fi
                read -rsn5 -t 0.1  ;;# flushing stdin
            "")  # Enter key
                menu_selected=${menu_items[${menu_items[$menu_limit]}]}
                return $(( 11 + ${menu_items[$menu_limit]} )) 
                ;;
            *)  menu_selected=${menu_items[$input]}
                return "$input" 
                ;;
        esac
    done
}


function run_menu() {
## --------------------------------------------------------------------------- 
# refresh menu when cursor move and number input

    menu_selected=""
    local menu_items=("$@" "0" ) #0 is endmark
    local menu_size=${#menu_items[@]}
    local menu_limit=$((menu_size - 1))

    clear
    print_menu "${menu_items[@]}"
    
    while read -rsn1 input
    do
        case "${input:0:1}" in
            $'\x1B')  # ESC ASCII code (https://dirask.com/posts/ASCII-Table-pJ3Y0j)
                echo $input
                read -rsn2 -t 0.1 input2
                case "$input2" in
                    [A)  # Up Arrow
                        if [ "${menu_items[$menu_limit]}" -ge 1 ]; then
                            menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} - 1 ))
                            clear
                            print_menu "${menu_items[@]}"
                        fi;;
                    [B)  # Down Arrow
                        if [ "${menu_items[$menu_limit]}" -lt "$menu_limit" ]; then
                            menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} + 1 ))
                            clear
                            print_menu "${menu_items[@]}"
                        fi;;
                esac

                read -rsn5 -t 0.1  ;; # flushing stdin
            "")  # Enter key
                echo $input
                menu_selected=${menu_items[${menu_items[$menu_limit]}]}
                return $(( 11 + ${menu_items[$menu_limit]} )) 
                ;;
            ^[0-9]*$)  
                echo $input            
                read -rsn2 -t 1 input2
                echo [${input}][${input2}]
                menu_selected=${menu_items[${input}${input2}]}
                return "${input}${input2}" 
                ;;
             *) read -rsn6   ;; # flushing stdin ;;
        esac
    done
}
