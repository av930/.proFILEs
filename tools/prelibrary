#!/bin/bash
# ===============================================================================
#  mail: joongkeun.kim@lge.com, av9300@gmail.com
#  this file should be sourced early step in script: source ./prelibrary
# ===============================================================================
#
#### ============================================================================
#### predefined variable
#### ============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';     RED='\e[1;31m';     green='\e[0;32m';       GREEN='\e[1;32m';
yellow='\e[0;33m';  YELLOW='\e[1;33m';  blue='\e[0;34m';        BLUE='\e[1;34m';
cyan='\e[0;36m';    CYAN='\e[1;36m';    magenta='\e[0;35m';     brown='\e[0;33m';
NCOL='\e[0m';       outline=${cyan};    inline=${yellow};

file_error=~/.repoconfig/repo.error
export PS4='| + '

## ---------------------------------------------------------------------------
# log message to stderr
# $1: message
_space="--------------------------------------------------------------------------------------"
_line="--------------------------------------------------------------------------------------"

lineup="￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣"
linedn="______________________________________________________________________________________"
linemi="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
linedb="〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓"
## dnlog, dbar, log can printf special charactor >> << | || , etc
log()    { printf "%b\\n" "${*}"  ;}
dnlog()  { printf "%b\\n" "${YELLOW}$1 ${NCOL} ${@:2}";}
dlog()   { printf "%b" "${yellow}$1 ${NCOL} ${@:2}";}
clog()   { log "${cyan}$1 ${NCOL} ${@:2}"  ;}
info()   { log "${GREEN}INFO: ${NCOL} ${*}"  ;}
warn()   { log "${YELLOW}WARN: ${NCOL} ${*}" ;}
err()    { log "${RED}ERROR: ${NCOL} ${*}" > /dev/stderr ;}
pCount() { tee >(let sum="$(wc -l) + ${1:-0}"; clog "#count:" "$((sum<0?0:+sum))" ) ;}


#${2:+[$2] }: if $2 exist, use '[$2] '
#${_line:(${2:+3}+${#2})}: if $2 is exist, skip 3 '-' chars for '[] ' chars
## supprort 2 _line type: bar inline, bar outline
## bar [inline|outline] "text1"
bar()    { printf "\n${!1}%s%s ${NCOL}\n" "${2:+[$2] }" "${_line:(${2:+3}+${#2})}" ;}
## bbar cyan "text1" "text2\t\n"
bbar()  { printf "${!1}%s%s ${NCOL}%b" "${2:+$2 }" "${_space:(${2:+3}+${#2})} " "$3" ;}


under()  {
    local temp="${1}" ; local ret=''
    if [ "${1:(-2)}" = "\n" ]; then temp=${temp::-2}; ret="\n"; fi
    printf "\n${green}〓〓〓   ${CYAN}%b${green}\n%b${NCOL}" "${temp}" "${linedb}${ret}";
}


function printToFILE(){
## ---------------------------------------------------------------------------
## printToFILE $(mktemp) title contents title-color
## $1: file, ## $2: head-msg, ## $3: content, ## $4: tail-msg

    case $1 in
    create) printfile=$(mktemp);;
    flush)
        if [ -f "$printfile" ]; then
            cat $printfile
            rm -f $printfile;
        fi ;;
    screen) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" ;;
    both) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" 2>&1 | tee -a $printfile;;
    *) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${_line:${#2}}" "$3" >> $printfile;;
    esac
}


function showRUN(){ echo "\$> $@"; "$@" ; return $?; }
## ---------------------------------------------------------------------------
# show command before execution
# $1: command
# usage: showRUN repo sync -qcj${njobs:-16} --no-tags --no-clone-bundle $1


function showRUNQ(){
## ---------------------------------------------------------------------------
# show command before execution
# $1: command
# usage: showRUN repo sync -qcj${njobs:-16} --no-tags --no-clone-bundle $1
    if [ "$1" = y ]; then
        echo "\$ ${@:2}";
        read -p "choose [y:continue| ctrl+c:break] : "
        #if [ "$REPLY" == 'y' ]; then "eval ${@:2}" ; fi
        if [ "$REPLY" == 'y' ]; then eval "${@:2}" ; fi
    else
        echo "\$ ${@}";
        eval "${@}"
    fi
}


## ---------------------------------------------------------------------------
# $1: message
# $2: exit code
function die() { local m="$1"; local e=${2-1}; echo "$m"; exit $e; }
function is_root() { [ $(id -u) -eq 0 ] && echo 1 || echo 0 ;}


function getCurrentIP(){
## ---------------------------------------------------------------------------
# get current ip-address

    default_ip=172.0.0.1

    readarray -t a <<<"$(hostname -I) $SSH_CONNECTION"
    for ip in ${a[@]}; do
        max=$(grep -o $ip <<< ${a[*]} | wc -l)
        if [ $max -eq 2 ] ;then default_ip=$ip && echo $ip && break; fi
    done
}


function checkifSHA(){
## ---------------------------------------------------------------------------
# check if SHA
    case $1 in
      *[!0-9A-Fa-f]* | "" ) return 1 ;;
      * ) return 0;;
    esac
}


function  getServer() {
## ---------------------------------------------------------------------------
## return remote (gerrit server) info as a various type
## format: getServer [29420|na|vgit|lamp|review] [port|http|sub|domain|subdomain|path|url|remote|debug]
## exception: vgitxxx lampxxx will return only postfix after delimter _
##            aaa-bbb같이 -를 포함하는 sub은 -앞의 string(aaa)만 사용한다.

    local key=$1
    local _item=$(serverInfo de $key |awk -F '|' '{print $2}')
    local return_type=$2

    case ${return_type} in                                                                    # return value
            http)    echo "${_item%:*}"                                                       # http://vgit.lge.com/na
    ;;      port)    echo "${_item##*:}"                                                      # 29420
    #;;       sub)    echo "${_item#*://}"| awk -F[./:] '{sub(/-.*/,"",$1);print $1}'          # vgit
    ;;       sub)    echo "${_item#*://}"| awk -F[./:] '{print $1}'          # vgit
    ;;    domain)    echo "${_item#*://}"| awk -F[./:] '{print $2"."$3}'                      # lge.com
    ;; subdomain)    echo "${_item#*://}"| awk -F[./:] '{print $1"."$2"."$3}'                 # vgit.lge.com
    ;;      path)    echo "${_item#*://}"| awk -F[./:] '{print $4}'                           # na
    ;;       url)    echo "${_item#*://}"| awk -F[./:] '{$4="/"$4;gsub(/\/none_.*/,"",$4);print $1"."$2"."$3$4}'            # vgit.lge.com/na
    ;;    remote)    echo "${_item#*://}"| awk -F[./:] '{print $1"_"$4}'                      # vgit_na
    ;;      pass)    serverInfo de $key  | awk -F '[[:space:]]*\\|'  '{print $4}'                           # N4lIA0SoQAoUfxlmCZudjNA12344
    ;;      user)    serverInfo de $key  | awk -F '[[:space:]]*\\|'  '{print $3}'                           # vc.integrator
    ;;     debug)    echo "${_item}"                                                          # http://vgit.lge.com/na:29420
    ;;         *)    echo "NULL";                                                             # vgit.lge.com/na:29420
    esac

}


function test_getServer() {
## ---------------------------------------------------------------------------
## check all format is well printed
## print remote (gerrit server) info for all supported format
## awk print 2nd line to last-1 line
#serverInfo show |awk -F '|' 'NR>1{print $1}'
    for _item in $(serverInfo show |awk -F '|' 'NR>2 {print last} {last=$1}');do
        revvcheck_server $_item log
        for _test in http port sub domain subdomain path url remote debug;do
            bbar cyan "${_item##*/}:$_test"  "$(getServer "${_item##*/}" "$_test")\n"
        done
    done
}


function serverInfo(){
## ---------------------------------------------------------------------------
# encoding as variable: code env <keyname> <key>
# encoding as file: code en <keyfile> <key>
# decode de <keyfile>
local temp temp_var
local cmd=$1 tag=$2 key=$3
    case $cmd in
       gen) #default server 접속정보 파일인 ~/.key_server를 생성한다.
            clog ".key_server" "is generated, \nplease add your server info with http key from: https://gerrit.url.com/settings/#HTTPCredentials\n"
        cat <<-EOF  >.key_server
			REMOTE,KEY   |URL to GERRIT                                         |ACCOUNT         |HTTP KEY
			vgit_na      |http://vgit.lge.com/na:29420                          |vc.integrator   |ex)N4lIA0SoQAoUfxlmCZudjNA1
			vgit_eu      |http://vgit.lge.com/eu:29430                          |vc.integrator   |~~~
			vgit_as      |http://vgit.lge.com/as:29440                          |vc.integrator   |~~~
			vgit_adas    |http://vgit.lge.com/adas:29550                        |vc.integrator   |
			devops_test  |http://vgit.lge.com/devops_test:29999                 |vc.integrator   |
			review       |http://lamp.lge.com/review:29418                      |vc.integrator   |
EOF
        cat .key_server

    ;;  en) #~/.key_server.en 로 암호화한다.
            if [ -f $HOME/.key_server ]; then
                clog "$HOME/.key_server.en" "is created from encrypting $HOME/.key_server"
                cat $HOME/.key_server | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey > $HOME/.key_server.en
                rm -f $HOME/.key_server
            else
                clog "$HOME/.key_server.en" "could be edit by '$FUNCNAME edit' [$HOME/.key_server]"
                err "You must create server connection info, use '$FUNCNAME gen'"; return 1
            fi

    ;;edit) #~/.key_server.en으로 부터 ~/.key_server를 생성하여 편집할수 있게 해준다.
            cat $HOME/.key_server.en | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey >$HOME/.key_server
            clog "$HOME/.key_server" "is decrypted from $HOME/.key_server.en"
            [ -f "$HOME/.key_server" ] && cat $HOME/.key_server || { err "You must create server connection info, use '$FUNCNAME gen'"; return 1; }

    ;;  de) #~/.key_server.en에서 server정보를 획득해온다.
            if [ -f $HOME/.key_server.en ]; then
                temp_var=$(cat $HOME/.key_server.en | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey |\
                  awk -v tag="$tag" -F '[[:space:]]*\\|' '$1 == tag{print $0}')
                if [ -n "$temp_var" ];then
                    echo $temp_var && return 0
                else temp_var=$(cat $HOME/.key_server.en | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey |\
                  awk -v tag="$tag" -F '[[:space:]]*\\|' '$2 ~ tag && !found {print $0; found=1}')
                    echo $temp_var && return 0
                fi

                err "matched http key is not existed or incorrect!";
                clog "guide" "run '$FUNCNAME edit' and edit proper server info in .key_server"
                return  1;
            else
                err "You must create server connection info, use '$FUNCNAME gen'"; return 1
            fi

    ;;debug) #getServer 함수 test용으로 모든 format대로 제대로 출력하는지 확인할수 있다.
            test_getServer

    ;;help) cat <<- 'EOF'
			usage) serverInfo <cmd> <option>

			guide) example cmds REPO_SCRIPT column in reppscript.csv
			serverInfo  gen             #generate template .key_server file to edit
			serverInfo   en             #after edit .key_server, encrypt it to .key_server.en
			serverInfo edit             #encrypted .key_server.en is decryped to .key_server to edit
			serverInfo   de vgit_na     #search vgit_na server and get info of it from .key_server.en
			serverInfo show             #show current server info from .key_server.en
			serverInfo debug            #check all formats of getServer api
EOF
    ;;show|*)  #현재 .key_server파일을 보여준다.
            [ ! -f $HOME/.key_server ] && "You must create server connection info, use '$FUNCNAME gen'"
            cat $HOME/.key_server.en | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey

            clog "help command:" "'serverInfo help'"

    esac
}


#### ============================================================================
#### predefined function
#### ============================================================================
function show_menu_do(){
## ---------------------------------------------------------------------------
# [call] show_menu_do "${INPUT}" #inputs should be divided with white spaces
# show the menu and make user select one from it.
    local lines
    #should be up one token
    lines=($1)
    if [[ ${#lines[@]} = 0 ]]; then
        echo "Not found"
        return 1
    fi
    local pathname
    local choice
    if [[ ${#lines[@]} > 1 ]]; then
        while [[ -z "$pathname" ]]; do
            local index=1
            local line
            for line in ${lines[@]}; do
                printf "%6s %s\n" "[$index]" $line
                index=$(($index + 1))
            done
            echo
            echo -n "Select one: "
            unset choice
            read choice
            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then
                echo "Invalid choice"
                continue
            fi
            pathname=${lines[$(($choice-1))]}
        done
    else
        # even though zsh arrays are 1-based, $foo[0] is an alias for $foo[1]
        pathname=${lines[0]}
    fi
     RET=$pathname
     return 0
}


function handler_args(){
## ---------------------------------------------------------------------------
# [call] handler_args $@  #$@ command paramter
# Hander Arguments

    local ret
    local options
    while getopts es: options 2> /dev/null
    do
       case $options in
          e) run_emul; ret=processed;;
          d) run_ddms; ret=processed;;
          \?) printf "${RED}Only -a,-e,-s are valid [$options] ${NCOL}\n"
            handler_menu
            ret=processed;;
       esac
    done

    if ! [ "$ret" = "processed" ]; then
        handler_menu
    fi
}


function print_menu() {
## ---------------------------------------------------------------------------
# called from run_menu

    local menu_items=("$@")
    local menu_limit=$(( ${#menu_items[@]} - 1 ))

    printf "${yellow}<< choose with arrow ←↑↓→ or num-key>>${NCOL}\n"
    printf "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
    for (( i = 0; i < $menu_limit; ++i ))
    do
        if [ "$i" = "${menu_items[$menu_limit]}" ]
        then  printf "${CYAN}->${NCOL} %02d: ${menu_items[i]}\n" "$i"
        else  printf "   %02d: ${menu_items[i]}\n" "$i"
        fi
    done
}


function __run_menu() {
## ---------------------------------------------------------------------------
# refresh menu when cursor move and number input

    menu_selected=""
    local menu_items=("$@" "0" ) #0 is endmark
    local menu_size=${#menu_items[@]}
    local menu_limit=$((menu_size - 1))

    clear
    print_menu "${menu_items[@]}"

    while read -rsn1 input
    do
        case "$input" in
            $'\x1B')  # ESC ASCII code (https://dirask.com/posts/ASCII-Table-pJ3Y0j)
                read -rsn1 -t 0.1 input
                if [ "$input" = "[" ]  # occurs before arrow code
                then
                    read -rsn1 -t 0.1 input
                    case "$input" in
                        A)  # Up Arrow
                            if [ "${menu_items[$menu_limit]}" -ge 1 ]
                            then
                                menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} - 1 ))
                                clear
                                print_menu "${menu_items[@]}"
                            fi;;
                        B)  # Down Arrow
                            if [ "${menu_items[$menu_limit]}" -lt "$menu_limit" ]
                            then
                                menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} + 1 ))
                                clear
                                print_menu "${menu_items[@]}"
                            fi;;
                    esac
                fi
                read -rsn5 -t 0.1  ;;# flushing stdin
            "")  # Enter key
                menu_selected=${menu_items[${menu_items[$menu_limit]}]}
                return $(( 11 + ${menu_items[$menu_limit]} ))
                ;;
            *)  menu_selected=${menu_items[$input]}
                return "$input"
                ;;
        esac
    done
}


function run_menu() {
## ---------------------------------------------------------------------------
# refresh menu when cursor move and number input

    menu_selected=""
    local menu_items=("$@" "0" ) #0 is endmark
    local menu_size=${#menu_items[@]}
    local menu_limit=$((menu_size - 1))

    clear
    print_menu "${menu_items[@]}"

    while read -rsn1 input
    do
        case "${input:0:1}" in
            $'\x1B')  # ESC ASCII code (https://dirask.com/posts/ASCII-Table-pJ3Y0j)
                echo $input
                read -rsn2 -t 0.1 input2
                case "$input2" in
                    [A)  # Up Arrow
                        if [ "${menu_items[$menu_limit]}" -ge 1 ]; then
                            menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} - 1 ))
                            clear
                            print_menu "${menu_items[@]}"
                        fi;;
                    [B)  # Down Arrow
                        if [ "${menu_items[$menu_limit]}" -lt "$menu_limit" ]; then
                            menu_items[$menu_limit]=$(( ${menu_items[$menu_limit]} + 1 ))
                            clear
                            print_menu "${menu_items[@]}"
                        fi;;
                esac

                read -rsn5 -t 0.1  ;; # flushing stdin
            "")  # Enter key
                echo $input
                menu_selected=${menu_items[${menu_items[$menu_limit]}]}
                return $(( 11 + ${menu_items[$menu_limit]} ))
                ;;
            ^[0-9]*$)
                echo $input
                read -rsn2 -t 1 input2
                echo [${input}][${input2}]
                menu_selected=${menu_items[${input}${input2}]}
                return "${input}${input2}"
                ;;
             *) read -rsn6   ;; # flushing stdin ;;
        esac
    done
}
