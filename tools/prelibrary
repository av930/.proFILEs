#!/bin/bash
# ===============================================================================
#  mail: joongkeun.kim@lge.com, av9300@gmail.com
#  this file should be sourced early step in script: source ./prelibrary
# ===============================================================================
#
#### ============================================================================
#### predefined variable
#### ============================================================================
## color definition, BOLD is brighter
red='\e[0;31m';     RED='\e[1;31m';     green='\e[0;32m';       GREEN='\e[1;32m';
yellow='\e[0;33m';  YELLOW='\e[1;33m';  blue='\e[0;34m';        BLUE='\e[1;34m';
cyan='\e[0;36m';    CYAN='\e[1;36m';    magenta='\e[0;35m';     brown='\e[0;33m';
NCOL='\e[0m';       outline=${cyan};    inline=${yellow}; 

file_error=~/.repoconfig/repo.error

## ---------------------------------------------------------------------------
# log message to stderr
# $1: message
line="--------------------------------------------------------------------------------------"
log()   { printf "%b\\n" "${*}"  ;}
info()  { log "${GREEN}INFO: ${NCOL} ${*}"  ;}
warn()  { log "${YELLOW}WARN: ${NCOL} ${*}" ;}
err()   { log "${RED}ERROR: ${NCOL} ${*}"   ;}

#${2:+[$2] }: if $2 exist, use '[$2] '
#${line:(${2:+3}+${#2})}: if $2 is exist, skip 3 '-' chars for '[] ' chars
bar()  { printf "${!1}%s%s ${NCOL}\n\n" "${2:+[$2] }" "${line:(${2:+3}+${#2})}" ;}

function printToFILE(){ 
## ---------------------------------------------------------------------------
## printToFILE $(mktemp) title contents title-color
## $1: file, ## $2: head-msg, ## $3: content, ## $4: tail-msg

    case $1 in
    create) printfile=$(mktemp);;
    flush) 
        if [ -f "$printfile" ]; then 
            cat $printfile
            rm -f $printfile; 
        fi ;;
    no) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${line:${#2}}" "$3" ;;
    *) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${line:${#2}}" "$3" >> $printfile;;
    esac
}


function showRUN(){ echo "\$ $@" ; "$@" ; }
## ---------------------------------------------------------------------------
# show command before execution
# $1: command


## ---------------------------------------------------------------------------
# $1: message
# $2: exit code
function die() { local m="$1"; local e=${2-1}; echo "$m"; exit $e; }
function is_root() { [ $(id -u) -eq 0 ] && echo 1 || echo 0 ;}


function getCurrentIP(){
## ---------------------------------------------------------------------------
# get current ip-address

    default_ip=172.0.0.1

    readarray -t a <<<"$(hostname -I) $SSH_CONNECTION"
    for ip in ${a[@]}; do
        max=$(grep -o $ip <<< ${a[*]} | wc -l)
        if [ $max -eq 2 ] ;then default_ip=$ip && echo $ip && break; fi
    done
}

function code(){
   case $1 in
      en) export ENCODE=$( echo $2 | openssl enc -base64 -e -aes-256-cbc -nosalt -pbkdf2  -pass pass:garbageKey );;
      de) echo "${ENCODE}" | openssl enc -base64 -d -aes-256-cbc -nosalt -pbkdf2 -pass pass:garbageKey ;;
   esac
}



#### ============================================================================
#### predefined function
#### ============================================================================
function show_menu_do(){
## ---------------------------------------------------------------------------
# [call] show_menu_do "${INPUT}" #inputs should be divided with white spaces
# show the menu and make user select one from it.
    local lines
    #should be up one token
    lines=($1)
    if [[ ${#lines[@]} = 0 ]]; then
        echo "Not found"
        return 1
    fi
    local pathname
    local choice
    if [[ ${#lines[@]} > 1 ]]; then
        while [[ -z "$pathname" ]]; do
            local index=1
            local line
            for line in ${lines[@]}; do
                printf "%6s %s\n" "[$index]" $line
                index=$(($index + 1))
            done
            echo
            echo -n "Select one: "
            unset choice
            read choice
            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then
                echo "Invalid choice"
                continue
            fi
            pathname=${lines[$(($choice-1))]}
        done
    else
        # even though zsh arrays are 1-based, $foo[0] is an alias for $foo[1]
        pathname=${lines[0]}
    fi
     RET=$pathname
     return 0
}


function handler_args(){
## ---------------------------------------------------------------------------
# [call] handler_args $@  #$@ command paramter
# Hander Arguments

    local ret
    local options
    while getopts es: options 2> /dev/null
    do
       case $options in
          e) run_emul; ret=processed;;
          d) run_ddms; ret=processed;;
          \?) printf "${RED}Only -a,-e,-s are valid [$options] ${NCOL}\n"
            handler_menu
            ret=processed;;
       esac
    done

    if ! [ "$ret" = "processed" ]; then
        handler_menu
    fi

}