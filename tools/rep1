#!/bin/bash
# ==========================================================================
#  readme    : repo utiliies
#  mail      : joongkeun.kim@lge.com, av9300@gmail.com
# ==========================================================================
##---------------------------------------------------------- DEBUG OPTION
#DEBUG=["echo -e"|:], : means no-operation
DEBUG=:
SCRIPT_DIR=${BASH_SOURCE%/*}

source ${SCRIPT_DIR}/prelibrary
#user setting
account=vc.integrator
mirror="/data001/${account}"/mirror
file_error=~/.repoconfig/repo.error


##--------------------------- Menu Functions --------------------------------
##============================================================================
function showRUN(){ echo "\$ $@" ; "$@" ; }
function getGitRootPath(){ echo $(git rev-parse --show-toplevel);}

function printToFILE(){ 
## ---------------------------------------------------------------------------
## printToFILE $(mktemp) title contents title-color
## $1: file, ## $2: head-msg, ## $3: content, ## $4: tail-msg
    line="--------------------------------------------------------------------------------"

    case $1 in
    create) printfile=$(mktemp);;
    flush) 
        if [ -f "$printfile" ]; then 
            cat $printfile
            rm -f $printfile; 
        fi ;;
    no) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${line:${#2}}" "$3" ;;
    *) printf "${yellow}%s %s ${NCOL}\n  %s\n" "$2" "${line:${#2}}" "$3" >> $printfile;;
    esac
}



function runSSHcheckError(){ 
## ---------------------------------------------------------------------------
    echo "\$ $@" ;"$@" 
    case $? in
     0) ;;
     1) echo Generic error, usually because invalid command line options or malformed configuration;;
     2) echo Connection failed;;
    65) echo Host not allowed to connect;;
    66) echo General error in ssh protocol;;
    67) echo Key exchange failed;;
    68) echo Reserved;;
    69) echo MAC error;;
    70) echo Compression error;;
    71) echo Service not available;;
    72) echo Protocol version not supported;;
    73) echo Host key not verifiable;;
    74) echo Connection failed;;
    75) echo Disconnected by application;;
    76) echo Too many connections;;
    77) echo Authentication cancelled by user;;
    78) echo No more authentication methods available;;
    79) echo Invalid user name;;
     *) echo Unknown Error;;
    esac
}



function runRepoInitcheckError(){ 
## ---------------------------------------------------------------------------
    echo "\$ $@"  
    #"$@" 2> >(tee -a ${file_error})
    "$@" | tee -a ${file_error}
    case $? in
     0) ;;
     1) echo Generic error, usually because invalid command line options or malformed configuration;;
     2) echo Connection failed;;
    esac
}
 
 
 
function runRepoSynccheckError(){ 
## ---------------------------------------------------------------------------
## ex) runRepoSynccheckError --depth=1 32
    if [ -z "$2" ]; then read -p "please input job number to repo sync [enter j16| number| ctrl+c]: " njobs; fi
    repo sync -qcj${njobs:-16} --no-tags --no-clone-bundle $1
    echo "KKK $@"  
    #"$@" 2> >(tee -a ${file_error})
    "$@" > >(tee -a ${file_error})
    case $? in
     0) ;;
     1) echo Generic error, usually because invalid command line options or malformed configuration;;
     2) echo Connection failed;;
     *) echo Unknown Error;;
    esac
}
 
 
 
function findFileLocation(){
## ---------------------------------------------------------------------------
## find input-path up and down, 
## $1:path name, $2:max depth
## ex) findFileLocation .repo 5
## ex) findFileLocation .git 2

    local target=${1:-.repo}
    local down_depth=${2:-2} #default value:2
    local ret=()
    
    # find in sub directory with depth
    readarray -t ret < <(find . -maxdepth ${down_depth} -path "*${target}")
    case ${#ret[@]} in
    1)  # already found sub dir
        REPO_PATH=$(readlink -f ${ret[0]})
        ;;
    0)  # find in parent directory upto $HOME
        while [[ "${PWD}" =~ "${HOME}" ]]; do
            if [ -d ${target} ]; then break; fi
            cd ..
        done
        if [ -d ${target} ]; then REPO_PATH=$(readlink -f ${target});else REPO_PATH="NULL";fi
        ;;
    *)  # found multiple dir in sub dir
        printf "subdir [%s]\n" ${#ret[@]}
        printf "%s\n" ${ret[@]}; 
        REPO_PATH="NULL"
        ;;
    esac
    #if [ "$1" = "show" ];then 
        printToFILE no "repo path" "${REPO_PATH}" "${yellow}"
    #fi
}



function getRepoCMD(){
## ---------------------------------------------------------------------------
    findFileLocation .repo/manifests 5
    if [ -d "${REPO_PATH}" ];then cd ${REPO_PATH};else printf "${RED}[error] you are not in repo project${NCOL}";return;fi
    
    local count file_tempa file_tempb 
        
    #set global variable
    REMOTE_URL=$(git remote -v |grep fetch |awk '{print $2}')
    BRANCH_REPO=$(git rev-parse --abbrev-ref --symbolic-full-name @{u}| sed 's:.*/::')
    REPO_URL=$(cat ../repo/.git/config |grep url|sed 's/.*=\(.*\)/\1/')
    REFER_MIRROR=$(cat ../manifests.git/config |grep reference|sed 's/.*=\(.*\)/\1/')

    if [ -z "${BRANCH_REPO}" ]; then 
        printf "${RED}[warning] please check if you have switched to a topic branch from after repo init${NCOL}\n"
        printf "${RED}[warning] temporarily set to local branch name${NCOL}\n"
        printf "\tyou can set-up upstream branch with: git branch -u %s <branch-name>\n" "$(echo $(git remote -v |cut -f1))"
        BRANCH_REPO=$(git rev-parse --abbrev-ref HEAD)
    fi
    
    # find using manifest.xml
    file_tempa=$(ls -Art ../*.xml | tail -n 1)
    count=$(grep -c include ${file_tempa})
    if [ -L "${file_tempa}" ];then 
        file_tempb=$(readlink "${file_tempa}")
        FILE_MANI=${file_tempb#*/}
    elif [ $count -eq 1 ]; then
        FILE_MANI=$(grep include $file_tempa |sed -E 's/<.*name="(.*)".\/>/\1/')
    else
        FILE_MANI=default.xml
    fi

    if [ -n "$REFER_MIRROR" ];then EXTRA_OPTION="--reference $REFER_MIRROR"; fi
    if [ "$1" = "show" ];then 
        printToFILE create
        printToFILE print "repo-init cmd" "repo init -u $REMOTE_URL -b $BRANCH_REPO -m $FILE_MANI --repo-url $REPO_URL $EXTRA_OPTION" "${yellow}"
        printToFILE flush
    fi
    return 0
}



function getCurrentIP(){
    default_ip=172.0.0.1

    readarray -t a <<<"$(hostname -I) $SSH_CONNECTION"
    for ip in ${a[@]}; do
        max=$(grep -o $ip <<< ${a[*]} | wc -l)
        if [ $max -eq 2 ] ;then default_ip=$ip && echo $ip && break; fi
    done
}


function findProperREPLServer(){
## ---------------------------------------------------------------------------
    local server_PORT=29418
    local server_URL=( lampmg1.lge.com lampgd1.lge.com )
    local file_temp=$(mktemp)
    local system_load=( 0 0 )
    local min_load=10000 
    local i=0
    local get_delay get_connection get_task get_mem 
    local printformat="%-20s|%10s|%14s|%10s|%12s|%10s"
    
    printf "replication server from lamp.lge.com: \n" >> $1
    printf "${printformat}\n" "server list" "delay(ms)" "connections(#)" "tasks(#)" "free memory" "total load" >> $1
    printf "${yellow}--------------------------------------------------------------------------------------\n${NCOL}" >> $1
    for server in "${server_URL[@]}"; do
        get_delay=$(ping ${server} -s 1016 -c 4 -A |sed -ne 's/.*ewma.*\/\(.*\) ms$/\1/p' | sed 's/\.//')
        if [ $? -ne 0 ]; then continue; fi 
        
        ssh -p ${server_PORT} -o ConnectTimeout=2 -o ConnectionAttempts=1 \
            ${server} gerrit show-caches | grep -E "(^SSH:|^Tasks:|^Mem:)" > ${file_temp}
        if [ $? -ne 0 ]; then continue;fi 

        get_connection=$(sed -n 's/^SSH: *\(.*\) users.*/\1/p' ${file_temp})
        get_task=$(sed -n 's/^Tasks: *\(.*\) total.*/\1/p' ${file_temp})
        get_mem=$(sed -n 's/^Mem:.*+ \(.*\) free.*/\1/p' ${file_temp})
        system_load[i]=$(echo "$get_delay/10 + $get_connection*80 + $get_task*100 + ${system_load[i]}" |bc )

        printf "${printformat}\n" $server $get_delay $get_connection $get_task $get_mem ${system_load[i]} >> $1
        if (( "${min_load}" >= "${system_load[i]}" )); then min_load=$system_load; REPL_SERVER="$server:$server_PORT"; fi
        (( i++ ))
    done

    rm -f ${file_temp}
}



function repoInit(){
## ---------------------------------------------------------------------------
    #option handle
    local repo_URL url_repl url revision manifest opt left
    while getopts m:b:u:c opt 2> /dev/null; do
       case $opt in
          u) url=$OPTARG;;
          b) revision=$OPTARG;;
          m) manifest=$OPTARG;; 
          c) current=$OPTARG;;
          *) left=${left} $OPTARG;;
       esac
    done

    #revision handle
    if [ -z "${revision}" ]; then 
        printf "usage: rep init -b [branch] [-m manifest.xml] \n";
        bar outline         
        printf "ex: rep init -b lampauto_s_release -m all.xml \n";
        printf "ex: rep init -u https://android.googlesource.com/platform/manifest -b android-12.1.0_r1 \n";
        printf "ex: rep init -u ssh://lampgd1.lge.com:29418/platform/manifest.git -b lampauto_r_release \n -m lampauto/lampauto-gm-recent.xml --reference=/data001/vc.integrator/mirror/lampauto_r_release/ \n --repo-url=ssh://lamp.lge.com:29418/repo/git-repo.git \n";
        echo "${revision}"
        exit
    fi
    
    local mirror_PATH='--reference=/data001/vc.integrator/mirror'
    local url_mirror=${mirror_PATH}/${revision}

    #url handle with replication server
    local file_info=$(mktemp)
    bar outline 'repo server info' > ${file_info}
    findProperREPLServer ${file_info}
    
    
    local cmd_repoinit="repo init $@ ${url_mirror}"
    if [ -n ${url} ];                 then cmd_repoinit="${cmd_repoinit} -u ${url}"; 
        else cmd_repoinit="${cmd_repoinit} -u ssh://${REPL_SERVER}/platform/manifest.git"; fi
    if [[ "${revision}" =~ "lamp" ]]; then cmd_repoinit="${cmd_repoinit} --repo-url=ssh://lamp.lge.com:29418/repo/git-repo.git"; 
        else cmd_repoinit="${cmd_repoinit} -b ${revision}"; fi
    if [ -n ${manifest} ];            then cmd_repoinit="${cmd_repoinit} -m ${manifest}" ;fi    
    if [ -n ${current} ];             then cmd_repoinit="${cmd_repoinit} -c ${current}"  ;fi    


    read -p "${cmd_repoinit}: "    
    #make final repo init cmd
    bar outline >> ${file_info}
    printf "generated full command:\n" >> ${file_info}
    printf "${cmd_repoinit}\n" >> ${file_info}
    
    #execute cmd
    time runRepoInitcheckError ${cmd_repoinit}
    bar outline >> ${file_info}
    printf "${red}error logfile: ${file_error} ${NCOL}\n" >> ${file_info}
    bar outline >> ${file_info}
    
    #show repo info
    cat ${file_info}; rm -f ${file_info}
    return
}



function handleMenu(){
## ---------------------------------------------------------------------------
printf ${green}
cat << PREFACE
==============================================================
 the menu for repo tools
 -------------------------------------------------------------
 account=$account, user_id=$(id -u ${account}), group_id=$user_id
 home_dir=${home_dir}"
 -------------------------------------------------------------
 supported command: ex) dock list
     info) list, images, images --all, ps, ps --all
     image) build, hello
     run) start, run, exec, debug
     delete) stop, rm, rmi, remove, clean
==============================================================
PREFACE
printf ${NCOL}

    local COLUMNS=60
    PS3=$'\e[00;35m=== Please input command! [Enter:menu, Ctrl+c:exit] === : \e[0m'
    select CHOICE in list images ps build hello start run exec stop remove clean debug find pull push
    do
        handleCommand $CHOICE
    done
}



function showManifestFile(){
## ---------------------------------------------------------------------------
    local file 
    local path='|--|--|--|--|--'
    local depth=0

    (( depth=depth+3 ))
    cat $1 | sed -n 's/.*include name="\(.*\)".*/\1/p' | while read -r file; do
        if [ -n "${file}" ];then   
            printf "%s${file}\n" "${path::${depth}}"
            showManifestFile ${file} ${depth}
        fi
        
    done
    (( depth=depth-3 ))
}

 
 
function getRepoINFO(){
## ---------------------------------------------------------------------------
    oldIFS=${IFS}; IFS=''; 
    
    getRepoCMD show
    printToFILE no 
    showManifestFile ${1:-${FILE_MANI}}
    printToFILE no 
    IFS=${oldIFS}
}



function handleCommand(){
## ---------------------------------------------------------------------------
local ret=0
    case $1 in
        init) repoInit "${@:2}"
            printf "${YELLOW}run next command: ${NCOL}\n"
            runRepoSynccheckError                       ;;
        sync) runRepoSynccheckError                     ;;
        info) getRepoINFO
              repo info                                 ;;
        path) findFileLocation .repo/manifests 5        ;;
        "") handleMenu "${@}"                           ;;
        *) repo "${@}"
          return $ret                                   ;;
    esac
}



##============================================================================
## Main
##============================================================================
#set -x
handleCommand $@
if [ $? -ne 0 ];then echo "needto add function"; fi
